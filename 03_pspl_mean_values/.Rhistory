names(df) <- 'src'
kable(df)
} else {
kable(msi)
}
run_sql('113_gen_tipsy_nat_aggregate.sql')
# these will all be natural
msi1 <- dbGetQuery(con,'select * from gy_agg_nat')
si <- msi1 %>% select(id,at_si, ba_si, bg_si, bl_si, cw_si, dr_si, ep_si, fd_si, hm_si, hw_si, lt_si, lw_si, pa_si, pl_si ,pw_si ,py_si ,sb_si ,se_si, ss_si, sw_si, sx_si, yc_si)
msi1 <- msi1 %>% select (id,bec_zone,bec_subzone,natural_species1,natural_species2,natural_species3,natural_species4,natural_species5)
msi1$species <- paste0(msi1$natural_species1,':',msi1$natural_species2,':',msi1$natural_species3,':',msi1$natural_species4,':',msi1$natural_species5)
msi1 <- msi1 %>% select(-natural_species1,-natural_species2,-natural_species3,-natural_species4,-natural_species5)
msi1$species <- gsub(':NA','',msi1$species)
msi <- left_join(msi1,si)
msi <- msi %>% select(-ep_si,-yc_si)
# condense species
msi$species<- gsub('Cwi','Cw',msi$species)
msi$species<- gsub('Fdi','Fd',msi$species)
msi$species<- gsub('Fdc','Fd',msi$species)
msi$species<- gsub('Hwi','Hw',msi$species)
msi$species<- gsub('Hwc','Hw',msi$species)
# find which species  are missing site index
msi$missing <- case_when(
grepl('At',msi$species) & msi$at_si == 0 ~ 'At',
TRUE ~ ''
)
sp <- c('Ba','Bg','Bl','Cw','Dr','Fd','Hm','Hw','Lt','Lw','Pa','Pl','Pw','Py','Sb','Se','Ss','Sw')
# start with the ba_si column
n <- 5
for (s in sp) {
n <- n + 1
msi$missing <- case_when(
grepl(s,msi$species) & msi[,n] == 0 ~ paste0(msi$missing,':',s),
TRUE ~ paste0(msi$missing,'')
)
}
msi <- msi %>% subset(missing != '') %>% select(id,bec_zone,bec_subzone,species,missing)
msi <- unique(msi)
if (nrow(msi) == 0){
df <- data.frame('src' <- 'No rows missing site index in gy_agg_pl')
names(df) <- 'src'
kable(df)
} else {
kable(msi)
}
#run_sql('114_bec_tree_species_substitution_pl.sql')
#run_sql('114_bec_tree_species_substitution_nat.sql')
run_sql('115_final_integration.sql')
run_sql('116_gen_pl_aggregate_fid.sql')
# these will all be planted
msi1 <- dbGetQuery(con,'select * from gy_agg_pl_fid')
si <- msi1 %>% select(feature_id,at_si, ba_si, bg_si, bl_si, cw_si, dr_si, ep_si, fd_si, hm_si, hw_si, lt_si, lw_si, pa_si, pl_si ,pw_si ,py_si ,sb_si ,se_si, ss_si, sw_si, sx_si, yc_si)
msi1 <- msi1 %>% select (feature_id,bec_zone,bec_subzone,planted_species1,planted_species2,planted_species3,planted_species4,planted_species5)
msi1$species <- paste0(msi1$planted_species1,':',msi1$planted_species2,':',msi1$planted_species3,':',msi1$planted_species4,':',msi1$planted_species5)
msi1 <- msi1 %>% select(-planted_species1,-planted_species2,-planted_species3,-planted_species4,-planted_species5)
msi1$species <- gsub(':NA','',msi1$species)
msi <- left_join(msi1,si)
msi <- msi %>% select(-ep_si,-yc_si)
# condense species
msi$species<- gsub('Cwi','Cw',msi$species)
msi$species<- gsub('Fdi','Fd',msi$species)
msi$species<- gsub('Fdc','Fd',msi$species)
msi$species<- gsub('Hwi','Hw',msi$species)
msi$species<- gsub('Hwc','Hw',msi$species)
# find which species  are missing site index
msi$missing <- case_when(
grepl('At',msi$species) & msi$at_si == 0 ~ 'At',
TRUE ~ ''
)
sp <- c('Ba','Bg','Bl','Cw','Dr','Fd','Hm','Hw','Lt','Lw','Pa','Pl','Pw','Py','Sb','Se','Ss','Sw')
# start with the ba_si column
n <- 5
for (s in sp) {
n <- n + 1
msi$missing <- case_when(
grepl(s,msi$species) & msi[,n] == 0 ~ paste0(msi$missing,':',s),
TRUE ~ paste0(msi$missing,'')
)
}
msi <- msi %>% subset(missing != '') %>% select(feature_id,bec_zone,bec_subzone,species,missing)
msi <- unique(msi)
if (nrow(msi) == 0){
df <- data.frame('src' <- 'No rows missing site index in gy_agg_pl')
names(df) <- 'src'
kable(df)
} else {
kable(msi)
}
run_sql('117_gen_nat_aggregate_fid.sql')
# these will all be natural
msi1 <- dbGetQuery(con,'select * from gy_agg_nat_fid')
si <- msi1 %>% select(feature_id,at_si, ba_si, bg_si, bl_si, cw_si, dr_si, ep_si, fd_si, hm_si, hw_si, lt_si, lw_si, pa_si, pl_si ,pw_si ,py_si ,sb_si ,se_si, ss_si, sw_si, sx_si, yc_si)
msi1 <- msi1 %>% select (feature_id,bec_zone,bec_subzone,natural_species1,natural_species2,natural_species3,natural_species4,natural_species5)
msi1$species <- paste0(msi1$natural_species1,':',msi1$natural_species2,':',msi1$natural_species3,':',msi1$natural_species4,':',msi1$natural_species5)
msi1 <- msi1 %>% select(-natural_species1,-natural_species2,-natural_species3,-natural_species4,-natural_species5)
msi1$species <- gsub(':NA','',msi1$species)
msi <- left_join(msi1,si)
msi <- msi %>% select(-ep_si,-yc_si)
# condense species
msi$species<- gsub('Cwi','Cw',msi$species)
msi$species<- gsub('Fdi','Fd',msi$species)
msi$species<- gsub('Fdc','Fd',msi$species)
msi$species<- gsub('Hwi','Hw',msi$species)
msi$species<- gsub('Hwc','Hw',msi$species)
# find which species  are missing site index
msi$missing <- case_when(
grepl('At',msi$species) & msi$at_si == 0 ~ 'At',
TRUE ~ ''
)
sp <- c('Ba','Bg','Bl','Cw','Dr','Fd','Hm','Hw','Lt','Lw','Pa','Pl','Pw','Py','Sb','Se','Ss','Sw')
# start with the ba_si column
n <- 5
for (s in sp) {
n <- n + 1
msi$missing <- case_when(
grepl(s,msi$species) & msi[,n] == 0 ~ paste0(msi$missing,':',s),
TRUE ~ paste0(msi$missing,'')
)
}
msi <- msi %>% subset(missing != '') %>% select(feature_id,bec_zone,bec_subzone,species,missing)
msi <- unique(msi)
if (nrow(msi) == 0){
df <- data.frame('src' <- 'No rows missing site index in gy_agg_pl')
names(df) <- 'src'
kable(df)
} else {
kable(msi)
}
#generate the plant natural history
run_sql('118_prov_plant_natural_history.sql')
run_sql('119_merged_aggregate.sql')
msi1 <- dbGetQuery(con,'select * from gy_agg_fid')
si <- msi1 %>% select(feature_id,at_si, ba_si, bg_si, bl_si, cw_si, dr_si, ep_si, fd_si, hm_si, hw_si, lt_si, lw_si, pa_si, pl_si ,pw_si ,py_si ,sb_si ,se_si, ss_si, sw_si, sx_si, yc_si)
msi1 <- msi1 %>% select (feature_id,bec_zone,bec_subzone,planted_species1,planted_species2,planted_species3,planted_species4,planted_species5,planted_percent,natural_species1,natural_species2,natural_species3,natural_species4,natural_species5)
msi1$nat_species <- paste0(msi1$natural_species1,':',msi1$natural_species2,':',msi1$natural_species3,':',msi1$natural_species4,':',msi1$natural_species5)
msi1$pl_species <- paste0(msi1$planted_species1,':',msi1$planted_species2,':',msi1$planted_species3,':',msi1$planted_species4,':',msi1$planted_species5)
# get rid of :NA
msi1$pl_species <- gsub(':NA','',msi1$pl_species)
msi1$nat_species <- gsub(':NA','',msi1$nat_species)
msi1 <- msi1 %>% select(-planted_species1,-planted_species2,-planted_species3,-planted_species4,-planted_species5,-natural_species1,-natural_species2,-natural_species3,-natural_species4,-natural_species5)
msi1$species1 <- case_when(
msi1$planted_percent == 100 ~ msi1$pl_species,
msi1$planted_percent == 0 ~ msi1$nat_species,
TRUE ~ paste0(msi1$pl_species,':',msi1$nat_species)
)
# get rid of duplicates
msi1$species <- sapply(strsplit(msi1$species1, ":"), function(x) paste(unique(x), collapse = ":"))
msi1 <- msi1 %>% select(-pl_species,-nat_species,-planted_percent,-species1)
msi <- left_join(msi1,si)
msi <- msi %>% select(-ep_si,-yc_si)
# condense species
msi$species<- gsub('Cwi','Cw',msi$species)
msi$species<- gsub('Fdi','Fd',msi$species)
msi$species<- gsub('Fdc','Fd',msi$species)
msi$species<- gsub('Hwi','Hw',msi$species)
msi$species<- gsub('Hwc','Hw',msi$species)
# find which species  are missing site index
msi$missing <- case_when(
grepl('At',msi$species) & msi$at_si == 0 ~ 'At',
TRUE ~ ''
)
sp <- c('Ba','Bg','Bl','Cw','Dr','Fd','Hm','Hw','Lt','Lw','Pa','Pl','Pw','Py','Sb','Se','Ss','Sw')
# start with the ba_si column
n <- 5
for (s in sp) {
n <- n + 1
msi$missing <- case_when(
grepl(s,msi$species) & msi[,n] == 0 ~ paste0(msi$missing,':',s),
TRUE ~ paste0(msi$missing,'')
)
}
msi2 <- msi %>% subset(missing != '')
msi2
msi2 <- msi %>% subset(missing != '') %>% select(bec_zone,bec_subzone,missing)
msi2
year <- '2022'
library(RPostgreSQL)
library(tidyverse)
library(data.table)
library(ggplot2)
# set up for schema and user
schema <- 'msyt_2022'
opt <- paste0("-c search_path=",schema)
user_name <- 'results'
database <- 'msyt'
con <- dbConnect('PostgreSQL',dbname='msyt',user=user_name,options=opt)
#load the R code for site index conversions
si_convert <- paste0(getwd(),'/site_index_conversion_equations_v2.r')
source(si_convert, local = knitr::knit_global())
# read avg_BEC_data: table = psql_bec_site_index_pre_convert
q1 <- paste0('select *  from msyt_',year,'.pspl_site_index_pre_convert_bec')
r1 <- dbSendQuery(con,q1)
avg_BEC_data <- dbFetch(r1,n=-1)
setDT(avg_BEC_data)
avg_BEC_data <- si_convert(avg_BEC_data)
## Substitute for MHmmp
mm <- avg_BEC_data %>% subset(bec_zone == 'MH' & bec_subzone == 'mm')
avg_BEC_data <- avg_BEC_data %>% subset(paste0(bec_zone,bec_subzone) != 'MHmmp' )
mm$bec_subzone <- 'mmp'
avg_BEC_data <- rbind(avg_BEC_data,mm)
## substitute for SWB mk,mks,un
# delete the older data
# all SWB data is blank
avg_BEC_data <- avg_BEC_data %>% subset(bec_zone != 'SWB')
swb1 <- avg_BEC_data %>% subset(bec_zone == 'BWBS' & bec_subzone == 'dk')
swb1$bec_zone <- 'SWB'
swb1$bec_subzone <- 'mk'
swb2 <- swb1
swb3 <- swb1
swb2$bec_zone <- 'SWB'
swb2$bec_subzone <- 'mks'
swb3$bec_zone <- 'SWB'
swb3$bec_subzone <- 'un'
avg_BEC_data <- rbind(avg_BEC_data,swb1,swb2,swb3)
q1 <- paste0('select *  from msyt_',year,'.pspl_site_index_pre_convert_fid')
avg_fid_data <- dbGetQuery(con,q1)
setDT(avg_fid_data)
# note that si_convert required 0 in place of NA
# si_convert will handle this
# run the SI conversions
avg_fid_data <- si_convert(avg_fid_data)
avg_fid_data[avg_BEC_data, on=c("bec_zone","bec_subzone"), at_si := ifelse(at_si==0, i.at_si,at_si)]
avg_fid_data[avg_BEC_data, on=c("bec_zone","bec_subzone"), ba_si := ifelse(ba_si==0, i.ba_si,ba_si)]
avg_fid_data[avg_BEC_data, on=c("bec_zone","bec_subzone"), bg_si := ifelse(bg_si==0, i.bg_si,bg_si)]
avg_fid_data[avg_BEC_data, on=c("bec_zone","bec_subzone"), bl_si := ifelse(bl_si==0, i.bl_si,bl_si)]
avg_fid_data[avg_BEC_data, on=c("bec_zone","bec_subzone"), cw_si := ifelse(cw_si==0, i.cw_si,cw_si)]
avg_fid_data[avg_BEC_data, on=c("bec_zone","bec_subzone"), dr_si := ifelse(dr_si==0, i.dr_si,dr_si)]
avg_fid_data[avg_BEC_data, on=c("bec_zone","bec_subzone"), ep_si := ifelse(ep_si==0, i.ep_si,ep_si)]
avg_fid_data[avg_BEC_data, on=c("bec_zone","bec_subzone"), fd_si := ifelse(fd_si==0, i.fd_si,fd_si)]
avg_fid_data[avg_BEC_data, on=c("bec_zone","bec_subzone"), hm_si := ifelse(hm_si==0, i.hm_si,hm_si)]
avg_fid_data[avg_BEC_data, on=c("bec_zone","bec_subzone"), hw_si := ifelse(hw_si==0, i.hw_si,hw_si)]
avg_fid_data[avg_BEC_data, on=c("bec_zone","bec_subzone"), lt_si := ifelse(lt_si==0, i.lt_si,lt_si)]
avg_fid_data[avg_BEC_data, on=c("bec_zone","bec_subzone"), lw_si := ifelse(lw_si==0, i.lw_si,lw_si)]
avg_fid_data[avg_BEC_data, on=c("bec_zone","bec_subzone"), pa_si := ifelse(pa_si==0, i.pa_si,pa_si)]
avg_fid_data[avg_BEC_data, on=c("bec_zone","bec_subzone"), pl_si := ifelse(pl_si==0, i.pl_si,pl_si)]
avg_fid_data[avg_BEC_data, on=c("bec_zone","bec_subzone"), pw_si := ifelse(pw_si==0, i.pw_si,pw_si)]
avg_fid_data[avg_BEC_data, on=c("bec_zone","bec_subzone"), py_si := ifelse(py_si==0, i.py_si,py_si)]
avg_fid_data[avg_BEC_data, on=c("bec_zone","bec_subzone"), sb_si := ifelse(sb_si==0, i.sb_si,sb_si)]
avg_fid_data[avg_BEC_data, on=c("bec_zone","bec_subzone"), se_si := ifelse(se_si==0, i.se_si,se_si)]
avg_fid_data[avg_BEC_data, on=c("bec_zone","bec_subzone"), ss_si := ifelse(ss_si==0, i.ss_si,ss_si)]
avg_fid_data[avg_BEC_data, on=c("bec_zone","bec_subzone"), sw_si := ifelse(sw_si==0, i.sw_si,sw_si)]
avg_fid_data[avg_BEC_data, on=c("bec_zone","bec_subzone"), sx_si := ifelse(sx_si==0, i.sx_si,sx_si)]
avg_fid_data[avg_BEC_data, on=c("bec_zone","bec_subzone"), yc_si := ifelse(yc_si==0, i.yc_si,yc_si)]
avg_fid_data[avg_fid_data$feature_id==6171742,]
library(RPostgreSQL)
library(tidyverse)
library(kableExtra)
# connect using schema
# set up for schema and user
schema <- paste0('msyt_',year)
library(RPostgreSQL)
library(tidyverse)
library(kableExtra)
year <- 2022
# connect using schema
# set up for schema and user
schema <- paste0('msyt_',year)
opt <- paste0("-c search_path=",schema)
user_name <- 'results'
database <- 'msyt'
con <- dbConnect('PostgreSQL',dbname='msyt',user=user_name,options=opt)
kablep <- function (x) {
kable(x) %>%
kable_styling(bootstrap_options = c("striped"),full_width=F,font_size=13,position = 'left')
}
SQLQuery <- function(query){
con <- dbConnect('PostgreSQL',dbname='msyt')
data <- dbGetQuery(con,query)
dbDisconnect(con)
return(data)
}
# note that using dbi type connectionns, the schema has been set to msyt_2021
# the psql command is:
#   psql -d "dbname=msyt options=--search_path=msyt_2021" -f 101_test_schema.sql
# and with user
# psql -d "dbname=msyt options=--search_path=msyt_2021" -U results -f 101_test_schema.sql
# the call to the psql interactive needs the schema assigned
# define the schema via options
db <- paste0('dbname=',database,' options=--search_path=',schema)
# force the quoted string
db <- shQuote(db)
# the systems call will then be:
# system2("psql",args=c('-d',db,'-U',userName,'-h',hostName,'-f','101_test_schema.sql'),stderr=TRUE)
# set this up as a function
run_sql <- function(fn){
system2("psql",args=c('-d',db,'-U',userName,'-h',hostName,'-f',fn),stderr=TRUE)
}
pspl_bec <- SQLQuery('select bec_zone,bec_subzone from pspl_site_index_mean_fid group by 1,2 order by 1,2)
pspl_bec <- SQLQuery('select bec_zone,bec_subzone from pspl_site_index_mean_fid group by 1,2 order by 1,2')
dbDisconnect(con)
library(RPostgreSQL)
library(tidyverse)
library(kableExtra)
year <- 2022
# connect using schema
# set up for schema and user
schema <- paste0('msyt_',year)
opt <- paste0("-c search_path=",schema)
user_name <- 'results'
database <- 'msyt'
#con <- dbConnect('PostgreSQL',dbname='msyt',user=user_name,options=opt)
kablep <- function (x) {
kable(x) %>%
kable_styling(bootstrap_options = c("striped"),full_width=F,font_size=13,position = 'left')
}
SQLQuery <- function(query){
#con <- dbConnect('PostgreSQL',dbname='msyt')
con <- dbConnect('PostgreSQL',dbname='msyt',user=user_name,options=opt)
data <- dbGetQuery(con,query)
dbDisconnect(con)
return(data)
}
# note that using dbi type connectionns, the schema has been set to msyt_2021
# the psql command is:
#   psql -d "dbname=msyt options=--search_path=msyt_2021" -f 101_test_schema.sql
# and with user
# psql -d "dbname=msyt options=--search_path=msyt_2021" -U results -f 101_test_schema.sql
# the call to the psql interactive needs the schema assigned
# define the schema via options
db <- paste0('dbname=',database,' options=--search_path=',schema)
# force the quoted string
db <- shQuote(db)
# the systems call will then be:
# system2("psql",args=c('-d',db,'-U',userName,'-h',hostName,'-f','101_test_schema.sql'),stderr=TRUE)
# set this up as a function
run_sql <- function(fn){
system2("psql",args=c('-d',db,'-U',userName,'-h',hostName,'-f',fn),stderr=TRUE)
}
pspl_bec <- SQLQuery('select bec_zone,bec_subzone from pspl_site_index_mean_fid group by 1,2 order by 1,2')
pspl_bec
bec_11 <- SQLQuery('select bec_zone,bec_subzone from bec11 group by 1,2 order by 1,2')
bec_11
pspl_bec <- SQLQuery('select bec_zone||coalesce(bec_subzone,'') as bec from pspl_site_index_mean_fid group by 1 order by 1')
pspl_bec <- SQLQuery("select bec_zone||coalesce(bec_subzone,'') as bec from pspl_site_index_mean_fid group by 1 order by 1")
bec11 <- SQLQuery('select bec_zone||bec_subzone as bec from bec11 group by 1 order by 1')
bec12 <- SQLQuery('select bec_zone||bec_subzone as bec from bec12 group by 1 order by 1')
bec <- SQLQuery("select bec_zone||coalesce(bec_subzone,'') as bec from pspl_site_index_mean_fid group by 1
union select bec_zone||bec_subzone as bec from bec11 group by 1
union select bec_zone||bec_subzone as bec from bec12 group by 1")
nrow(bec)
bec
becj <- left_join(bec,pspl_bec)
becj
becj <- cbind(bec,pspl_bec)
pspl_bec <- SQLQuery("select bec_zone||coalesce(bec_subzone,'') as pspl_bec from pspl_site_index_mean_fid group by 1 order by 1")
bec11 <- SQLQuery('select bec_zone||bec_subzone as bec11 from bec11 group by 1 order by 1')
bec12 <- SQLQuery('select bec_zone||bec_subzone as bec12 from bec12 group by 1 order by 1')
bec <- SQLQuery("select bec_zone||coalesce(bec_subzone,'') as bec from pspl_site_index_mean_fid group by 1
union select bec_zone||bec_subzone as bec from bec11 group by 1
union select bec_zone||bec_subzone as bec from bec12 group by 1")
bec <- left_join(bec,pspl_bec)
pspl_bec
pspl_bec$bec = pspl_bec$pspl_bec
becj <- left_join(bec,pspl_bec)
becj
bec11$bec <- bec11$bec11
bec12$bec <- bec12$bec12
becj <- left_join(bec,pspl_bec,bec11,bec12)
becj <- left_join(bec,pspl_bec)
becj <- left_join(bec,pspl_bec)
becj <- left_join(becj,bec11)
becj <- left_join(becj,bec12)
becj
becj <- becj %>% subset(1(bec = spspl_bec & bec = bec11 & bec = bec12))
becj <- becj %>% subset(1(bec == spspl_bec & bec == bec11 & bec == bec12))
becj <- becj %>% subset(!(bec == spspl_bec & bec == bec11 & bec == bec12))
becj <- becj %>% subset(!(bec == pspl_bec & bec == bec11 & bec == bec12))
becj
becj <- left_join(bec,pspl_bec)
becj <- left_join(becj,bec11)
becj <- left_join(becj,bec12)
becj <- becj %>% subset((bec != pspl_bec | bec != bec11 | bec != bec12))
becj
becj <- left_join(bec,pspl_bec)
becj <- left_join(becj,bec11)
becj <- left_join(becj,bec12)
becj
bec11
becj <- left_join(bec,pspl_bec)
becj <- left_join(becj,bec11)
becj <- left_join(becj,bec12)
becj
becj[becj$bec == becj$pspl_bec & becj$bec == becj$bec11 & becj$bec==becj$bec12,]
becj[(becj$bec == becj$pspl_bec & becj$bec == becj$bec11 & becj$bec==becj$bec12),]
becj[!(becj$bec == becj$pspl_bec & becj$bec == becj$bec11 & becj$bec==becj$bec12),]
becc <- becj %>% subset((bec == pspl_bec & bec == bec11 & bec == bec12))
becc
becf <- becj %>% subset(!bec %in% becc$bec)
becf
nrow(becf)
becf <- becj %>% subset(!bec %in% becc$bec)
becf <- becf %>% subset(bec != 'NULLNULL') %>% arrange(bec)
becf
kablep(becf)
pspl_bec <- SQLQuery("select bec_zone||coalesce(bec_subzone,'') as pspl_bec from pspl_site_index_mean_fid group by 1 order by 1")
bec11 <- SQLQuery('select bec_zone||bec_subzone as bec11 from bec11 where bec_zone != 'NULL' group by 1 order by 1')
pspl_bec <- SQLQuery("select bec_zone||coalesce(bec_subzone,'') as pspl_bec from pspl_site_index_mean_fid group by 1 order by 1")
bec11 <- SQLQuery("select bec_zone||bec_subzone as bec11 from bec11 where bec_zone != 'NULL' group by 1 order by 1")
bec12 <- SQLQuery('select bec_zone||bec_subzone as bec12 from bec12 group by 1 order by 1')
bec <- SQLQuery("select bec_zone||coalesce(bec_subzone,'') as bec from pspl_site_index_mean_fid group by 1
union select bec_zone||bec_subzone as bec from bec11where bec_zone != 'NULL'  group by 1
union select bec_zone||bec_subzone as bec from bec12 group by 1")
pspl_bec$bec = pspl_bec$pspl_bec
bec11$bec <- bec11$bec11
bec12$bec <- bec12$bec12
becj <- left_join(bec,pspl_bec)
pspl_bec <- SQLQuery("select bec_zone||coalesce(bec_subzone,'') as pspl_bec from pspl_site_index_mean_fid group by 1 order by 1")
bec11 <- SQLQuery("select bec_zone||bec_subzone as bec11 from bec11 where bec_zone != 'NULL' group by 1 order by 1")
bec12 <- SQLQuery('select bec_zone||bec_subzone as bec12 from bec12 group by 1 order by 1')
bec <- SQLQuery("select bec_zone||coalesce(bec_subzone,'') as bec from pspl_site_index_mean_fid group by 1
union select bec_zone||bec_subzone as bec from bec11 where bec_zone != 'NULL'  group by 1
union select bec_zone||bec_subzone as bec from bec12 group by 1")
pspl_bec$bec = pspl_bec$pspl_bec
bec11$bec <- bec11$bec11
bec12$bec <- bec12$bec12
becj <- left_join(bec,pspl_bec)
becj <- left_join(becj,bec11)
becj <- left_join(becj,bec12)
becj
becsub <- becj %>% subset((bec == pspl_bec & bec == bec11 & bec == bec12))
becf <- becj %>% subset(!bec %in% becsub$bec) %>% arrange(bec)
becf
library(RPostgreSQL)
library(tidyverse)
library(kableExtra)
year <- 2022
# connect using schema
# set up for schema and user
schema <- paste0('msyt_',year)
opt <- paste0("-c search_path=",schema)
user_name <- 'results'
database <- 'msyt'
#con <- dbConnect('PostgreSQL',dbname='msyt',user=user_name,options=opt)
kablep <- function (x) {
kable(x) %>%
kable_styling(bootstrap_options = c("striped"),full_width=F,font_size=13,position = 'left')
}
SQLQuery <- function(query){
#con <- dbConnect('PostgreSQL',dbname='msyt')
con <- dbConnect('PostgreSQL',dbname='msyt',user=user_name,options=opt)
data <- dbGetQuery(con,query)
dbDisconnect(con)
return(data)
}
# note that using dbi type connectionns, the schema has been set to msyt_2021
# the psql command is:
#   psql -d "dbname=msyt options=--search_path=msyt_2021" -f 101_test_schema.sql
# and with user
# psql -d "dbname=msyt options=--search_path=msyt_2021" -U results -f 101_test_schema.sql
# the call to the psql interactive needs the schema assigned
# define the schema via options
db <- paste0('dbname=',database,' options=--search_path=',schema)
# force the quoted string
db <- shQuote(db)
# the systems call will then be:
# system2("psql",args=c('-d',db,'-U',userName,'-h',hostName,'-f','101_test_schema.sql'),stderr=TRUE)
# set this up as a function
run_sql <- function(fn){
system2("psql",args=c('-d',db,'-U',userName,'-h',hostName,'-f',fn),stderr=TRUE)
}
pspl_bec <- SQLQuery("select bec_zone||coalesce(bec_subzone,'') as pspl_bec from pspl_site_index_mean_fid group by 1 order by 1")
bec11 <- SQLQuery("select bec_zone||bec_subzone as bec11 from bec11 where bec_zone != 'NULL' group by 1 order by 1")
bec12 <- SQLQuery('select bec_zone||bec_subzone as bec12 from bec12 group by 1 order by 1')
bec <- SQLQuery("select bec_zone||coalesce(bec_subzone,'') as bec from pspl_site_index_mean_fid group by 1
union select bec_zone||bec_subzone as bec from bec11 where bec_zone != 'NULL'  group by 1
union select bec_zone||bec_subzone as bec from bec12 group by 1")
bec
pspl_bec$bec = pspl_bec$pspl_bec
bec11$bec <- bec11$bec11
bec12$bec <- bec12$bec12
bec11
bec12
pspl_bec <- SQLQuery("select bec_zone||coalesce(bec_subzone,'') as pspl_bec from pspl_site_index_mean_fid group by 1 order by 1")
bec11 <- SQLQuery("select bec_zone||bec_subzone as bec11 from bec11 where bec_zone != 'NULL' group by 1 order by 1")
bec12 <- SQLQuery("select bec_zone||bec_subzone as bec12 from bec12 where bec_zone != 'NULL' group by 1 order by 1")
bec <- SQLQuery("select bec_zone||coalesce(bec_subzone,'') as bec from pspl_site_index_mean_fid group by 1
union select bec_zone||bec_subzone as bec from bec11 where bec_zone != 'NULL'  group by 1
union select bec_zone||bec_subzone as bec from bec12 where bec_zone != 'NULL' group by 1")
pspl_bec$bec = pspl_bec$pspl_bec
bec11$bec <- bec11$bec11
bec12$bec <- bec12$bec12
becj <- left_join(bec,pspl_bec)
becj <- left_join(becj,bec11)
becj <- left_join(becj,bec12)
becj
becsub <- becj %>% subset((bec == pspl_bec & bec == bec11 & bec == bec12))
becf <- becj %>% subset(!bec %in% becsub$bec) %>% arrange(bec)
becf
install.packages("magick")
install.packages("webshot")
library(RPostgreSQL)
library(tidyverse)
library(kableExtra)
library(magick)
library(webshot)
year <- 2022
# connect using schema
# set up for schema and user
schema <- paste0('msyt_',year)
opt <- paste0("-c search_path=",schema)
user_name <- 'results'
database <- 'msyt'
#con <- dbConnect('PostgreSQL',dbname='msyt',user=user_name,options=opt)
kablep <- function (x) {
kable(x) %>%
kable_styling(bootstrap_options = c("striped"),full_width=F,font_size=13,position = 'left') %>%
as_image()
}
kablep_html - function (x) {
kable(x) %>%
kable_styling(bootstrap_options = c("striped"),full_width=F,font_size=13,position = 'left')
}
