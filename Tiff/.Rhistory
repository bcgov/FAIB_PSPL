# create small raster
m <- matrix(1:4,nrow=2,ncol=2)
rm <- terra::rast(m)
rm[1] <- 178400063
rm[2] <- 178400064
rm[3] <- 178400065
rm[4] <- 178400066
terra::values(rm)
terra::writeRaster(rm, file="test_i.tif", overwrite=TRUE, datatype = 'INT4S')
terra::writeRaster(rm, file="test_f.tif", overwrite=TRUE, datatype = 'FLT4S')
ri <- terra::rast("test_i.tif")
rf <- terra::rast("test_f.tif")
terra::values(ri)
terra::values(rf)
# create small raster
m <- matrix(1:4,nrow=2,ncol=2)
rm <- terra::rast(m)
# populate with integer values
rm[1] <- 178400063
rm[2] <- 178400064
rm[3] <- 178400065
rm[4] <- 178400066
# check that values are what we expect
terra::values(rm)
# note on data type
# INT4U is available but they are best avoided as R does not support 32-bit unsigned integers.
# write as integer
terra::writeRaster(rm, file="test_i.tif", overwrite=TRUE, datatype = 'INT4S')
# write as float
terra::writeRaster(rm, file="test_f.tif", overwrite=TRUE, datatype = 'FLT8S')
ri <- terra::rast("test_i.tif")
rf <- terra::rast("test_f.tif")
terra::values(ri)
terra::values(rf)
# create small raster
m <- matrix(1:4,nrow=2,ncol=2)
rm <- terra::rast(m)
# populate with integer values
rm[1] <- 178400063
rm[2] <- 178400064
rm[3] <- 178400065
rm[4] <- 178400066
# check that values are what we expect
terra::values(rm)
# note on data type
# INT4U is available but they are best avoided as R does not support 32-bit unsigned integers.
# write as integer
terra::writeRaster(rm, file="test_i.tif", overwrite=TRUE, datatype = 'INT4S')
# write as float FLT4S
terra::writeRaster(rm, file="test_f4.tif", overwrite=TRUE, datatype = 'FLT4S')
# write as float FLT8S
terra::writeRaster(rm, file="test_f8.tif", overwrite=TRUE, datatype = 'FLT8S')
# read both Tifs
ri <- terra::rast("test_i.tif")
rf4 <- terra::rast("test_f4.tif")
rf8 <- terra::rast("test_f8.tif")
# integer values
terra::values(ri)
# float(values) FLT4S
terra::values(rf4)
# float(values) FLT8S
terra::values(rf8)
# note on data type
# INT4U is available but they are best avoided as R does not support 32-bit unsigned integers.
# write as integer INT4S
terra::writeRaster(r, file="test_i.tif", overwrite=TRUE, datatype = 'INT4S')
# note on data type
# INT4U is available but they are best avoided as R does not support 32-bit unsigned integers.
# write as integer INT4S
terra::writeRaster(raster_example, file="test_i.tif", overwrite=TRUE, datatype = 'INT4S')
# create small raster
m <- matrix(1:4,nrow=2,ncol=2)
raster_example <- terra::rast(m)
# populate with integer values
raster_example[1] <- 17840063
raster_example[2] <- 17840064
raster_example[3] <- 17840065
raster_example[4] <- 17840066
# check that values are what we expect
terra::values(raster_example)
# write as integer INT4S
terra::writeRaster(raster_example, file="test_i.tif", overwrite=TRUE, datatype = 'INT4S')
# write as float FLT4S
terra::writeRaster(raster_example, file="test_f4.tif", overwrite=TRUE, datatype = 'FLT4S')
# write as float FLT8S
terra::writeRaster(raster_example, file="test_f8.tif", overwrite=TRUE, datatype = 'FLT8S')
# read Tifs
ri  <- terra::rast("test_i.tif")
rf4 <- terra::rast("test_f4.tif")
rf8 <- terra::rast("test_f8.tif")
# integer values
terra::values(ri)
# float(values) FLT4S
terra::values(rf4)
# float(values) FLT8S
terra::values(rf8)
library(kableExtra)
# create small raster
m <- matrix(1:4,nrow=2,ncol=2)
raster_example <- terra::rast(m)
# populate with integer values
raster_example[1] <- 17840063
raster_example[2] <- 17840064
raster_example[3] <- 17840065
raster_example[4] <- 17840066
# check that values are what we expect
v0 <- terra::values(raster_example)
class(v0)
v0
names(v0) <- 'x'
v0
v0 <- as.data.frame(terra::values(raster_example))
v0
names(v0) <- 'Value'
v0
