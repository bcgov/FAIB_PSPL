year <- '2022'
library(RPostgreSQL)
# set up for load to PostgreSQL
schema <- paste0('msyt_',year)
opt <- paste0("-c search_path=",schema)
user_name <- 'results'
database <- 'msyt'
con2 <- dbConnect('PostgreSQL',dbname=database,user=user_name,options=opt)
# this is where the unzipped files are placed locally
local_pspl_folder <- paste0(substr(getwd(),1,1),':/data/data_projects/AR2022/PSPL/gdb_data')
# build list of the PSPL gdbs
# list of gdb files to process
f_list <- list.files(local_pspl_folder,full.names = TRUE)
#number of files to process
num_units = length(f_list)
num_units
i <- 1
name1 <- c("pspl_unit")
unit <- paste0("unit=",name1,i)
# unit name after intersect
name2 <- paste("pspl_fid_unit")
table <- paste0("sp=",name2,i)
cmd <- c("-d",database,"-f","2_02_fast_intersect.sql", "-v",unit, "-v", table)
cmd
name1 <- c("msyt_2022.pspl_unit")
unit <- paste0("unit=",name1,i)
unit
name2 <- paste("msyt_2022.pspl_fid_unit")
table <- paste0("sp=",name2,i)
table
cmd <- c("-d",database,"-f","2_02_fast_intersect.sql", "-v",unit, "-v", table)
ret_code <- system2("psql",args=cmd,wait=TRUE,stdout=TRUE,stderr=TRUE)
cmd <- c("-d",database,"-U",'results',"-f","2_02_fast_intersect.sql", "-v",unit, "-v", table)
ret_code <- system2("psql",args=cmd,wait=TRUE,stdout=TRUE,stderr=TRUE)
database
``{r intersect,eval=TRUE, echo=FALSE, message=FALSE}
# the call to the psql interactive needs the schema assigned
# define the schema via options
db <- paste0('dbname=',database,' options=--search_path=',schema)
# force the quoted string
db <- shQuote(db)
# the systems call will then be:
# system2("psql",args=c('-d',db,'-U',userName,'-h',hostName,'-f','101_test_schema.sql'),stderr=TRUE)
# set this up as a function
run_sql <- function(fn,x1,x2){
system2("psql",args=c('-d',db,'-U',user_name,'-f',fn,'-v',x1,'-v2',x2),stderr=TRUE)
}
# input unit name
name1 <- c("pspl_unit")
unit <- paste0("unit=",name1,i)
# unit name after intersect
name2 <- paste("pspl_fid_unit")
table <- paste0("sp=",name2,i)
run_sql('2_02_fast_intersect.sql',unit,table)
db
run_sql('2_02_intersect_fid.sql',unit,table)
unit
fn
db
user_name
x1
unit
table
x1 <- unit
x2 <- table
ARG <- c('-d',db,'-U',user_name,'-f',fn,'-v',x1,'-v2',x2)
fn <- 2_02_intersect_fid.sql
ARG <- c('-d',db,'-U',user_name,'-f',fn,'-v',x1,'-v2',x2)
fn <- '2_02_intersect_fid.sql'
ARG <- c('-d',db,'-U',user_name,'-f',fn,'-v',x1,'-v2',x2)
ARG
system2("psql",args=c('-d',db,'-U',user_name,'-f',fn,'-v',x1,'-v2',x2),stderr=TRUE)
x1 <- noquote(x1)
x2 <- noquote(x2)
ARG <- c('-d',db,'-U',user_name,'-f',fn,'-v',x1,'-v2',x2)
ARG
x1 <- shQuote(noquote(x1))
x2 <- sqQuote(noquote(x2))
x2 <- shQuote(noquote(x2))
ARG <- c('-d',db,'-U',user_name,'-f',fn,'-v',x1,'-v',x2)
ARG
system2("psql",args=c('-d',db,'-U',user_name,'-f',fn,'-v',x1,'-v',x2),stderr=TRUE)
system2("psql",args=c('-d',db,'-U',user_name,'-f',fn,'-v',x1,'-v',x2),stderr=TRUE)
system2("psql",args=c('-d',db,'-U',user_name,'-f',fn,'-v',x1,'-v',x2),stderr=TRUE)
# set up for load to PostgreSQL
schema <- paste0('msyt_',year,',public')
opt <- paste0("-c search_path=",schema)
user_name <- 'results'
database <- 'msyt'
# the call to the psql interactive needs the schema assigned
# define the schema via options
db <- paste0('dbname=',database,' options=--search_path=',schema)
# force the quoted string
db <- shQuote(db)
x1 <- shQuote(noquote(x1))
x2 <- shQuote(noquote(x2))
ARG <- c('-d',db,'-U',user_name,'-f',fn,'-v',x1,'-v',x2)
system2("psql",args=c('-d',db,'-U',user_name,'-f',fn,'-v',x1,'-v',x2),stderr=TRUE)
x1 <- unit
x2 <- table
ARG <- c('-d',db,'-U',user_name,'-f',fn,'-v',x1,'-v',x2)
system2("psql",args=c('-d',db,'-U',user_name,'-f',fn,'-v',x1,'-v',x2),stderr=TRUE)
con2
year <- '2022'
library(RPostgreSQL)
# set up for load to PostgreSQL
# schema must include public for geom functions to work.
schema <- paste0('msyt_',year)
opt <- paste0("-c search_path=",schema)
user_name <- 'results'
database <- 'msyt'
con <- dbConnect('PostgreSQL',dbname=database,user=user_name,options=opt)
local_pspl_folder <- paste0(substr(getwd(),1,1),':/data/data_projects/AR2022/PSPL/gdb_data')
# build list of the PSPL gdbs
# list of gdb files to process
f_list <- list.files(local_pspl_folder,full.names = TRUE)
#number of files to process
num_units = length(f_list)
q1 <- 'drop table if existspspl_raw'
dbExecute(con,q1)
dbSendQuery(con,q1)
year
schema
year <- '2022'
library(sf)
library(RPostgreSQL)
# set up for load to PostgreSQL
schema <- paste0('msyt_',year)
opt <- paste0("-c search_path=",schema)
user_name <- 'results'
database <- 'msyt'
con <- dbConnect('PostgreSQL',dbname=database,user=user_name,options=opt)
# this is where the unzipped files are placed locally
local_gdb_folder <- paste0(substr(getwd(),1,1),':/data/data_projects/AR2022/PSPL/gdb_data_test')
# build list of the PSPL gdbs
# list of gdb files to process
f_list <- list.files(local_gdb_folder,full.names = TRUE)
num_gdb = length(f_list)  #number of files to process
f_list
local_gdb_folder <- paste0(substr(getwd(),1,1),':/data/data_projects/AR2022/PSPL/gdb_data')
# build list of the PSPL gdbs
# list of gdb files to process
f_list <- list.files(local_gdb_folder,full.names = TRUE)
num_gdb = length(f_list)  #number of files to process
f_list[1]
point_set <- vect(pf)
point_set <- terra::vect(pf)
nrow(point_set)
library(terra)
pf
n <- 1
pf <- f_list[1]
ps <- terra::vect(pf)
nrow(ps)
ps <- sf::st_read(pf)
nrow(ps)
tab_name <- paste0('pspl_terra_unit',n)
dbWriteTable(con,tab_name,ps,row.names=FALSE,overwrite=TRUE)
a <- dbWriteTable(con,tab_name,ps,row.names=FALSE,overwrite=TRUE)
a
tab_name
dbDisconnect(con)
year <- '2022'
library(sf)
library(terra)
library(RPostgreSQL)
# set up for load to PostgreSQL
schema <- paste0('msyt_',year)
opt <- paste0("-c search_path=",schema)
user_name <- 'postgres'
database <- 'msyt'
con <- dbConnect('PostgreSQL',dbname=database,user=user_name,options=opt)
dbWriteTable(con,'tab_name'test',ps,row.names=FALSE,overwrite=TRUE)
dbWriteTable(con,'test',ps,row.names=FALSE,overwrite=TRUE)
z <- dbGetQuery(con,q1)
dbDisconnect(con)
# set up for load to PostgreSQL
schema <- paste0('msyt_',year)
opt <- paste0("-c search_path=",schema)
user_name <- 'results'
database <- 'msyt'
con <- dbConnect('PostgreSQL',dbname=database,user=user_name,options=opt)
z <- dbGetQuery(con,q1)
q1 <- 'select count (*) from pspl_unit1'
z <- dbGetQuery(con,q1)
z
q1 <- 'select id_tag from pspl_unit1'
z <- dbGetQuery(con,q1)
head(z)
head(ps)
library(tidyverse)
t <- ps %>% subset(ID_TAG %in% z$id_tag)
t <- ps %>% subset(!ID_TAG %in% z$id_tag)
nrow(t)
head(t)
t[is.na(t)] <- 0
head(t)
t$sum_si <- AT_SI+BA_SI+BG_SI+BL_SI+CW_SI+DR_SI+EP_SI+FD_SI+HM_SI+HW_SI+LT_SI+LW_SI+PA_SI+PL_SI+PW_SI+PY_SI+SB_SI+SE_SI+SS_SI+SW_SI+SX_SI+YC_SI
t$sum_si <- t$AT_SI+t$BA_SI+t$BG_SI+t$BL_SI+t$CW_SI+t$DR_SI+t$EP_SI+t$FD_SI+t$HM_SI+t$HW_SI+t$LT_SI+t$LW_SI+t$PA_SI+t$PL_SI+t$PW_SI+t$PY_SI+t$SB_SI+t$SE_SI+t$SS_SI+t$SW_SI+t$SX_SI+t$YC_SI
count(t,sum_si)
