library(terra)
fn <- 'D:/data/data_projects/base_maps/tsa13_vri.gdb'
r <- rast(fn)
r <- rast(fn)
v <- vect(fn)
r <- rast(v)
lev <- levels(r)[[1]]
lev
levels(r)
class(r)
rasterize(v,r,field = 'POLYGON_ID")
)
)
rm(r)
rasterize(v,r,field = 'POLYGON_ID')
ext(v)
v$xmin
ext(v)[1]
ext(v)[2]
xmin <- ext(v)[1]
xmax <- ext(v)[2]
ymin <- ext(v)[3]
ymax <- ext(v)[4]
xmin <- as.integer(xmin - 100)
xmin
ncol <- (xmax - xmin) / 100
nclo
ncol
ncol <- as.integer((xmax - xmin) / 100)
ncol
nrow <- as.integer((ymax - ymin) / 100)
r <- rast(xmin = xmin, ncols = ncol, nrows=nrow)
r <- rast(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax)
rasterize(v,r,field = 'POLYGON_ID')
levels(r)
v
r2 <- r
rasterize(v,r2,field = 'INVENTORY_STANDARD_CD')
levels(r2)
levels(r2)[[1]]
levels(r2)[[2]]
freq(r2)
freq(r2)[1]
(r2)[1]
lev <- levels(r2)[[1]]
lev
ev <- lev[, c("ID", "Land.Cover.Class")]
lev <- lev[, c("ID", "Land.Cover.Class")]
writeRaster(r2,'D:/data/data_project/pspl_test/rast_vat.tif')
plot(r2)
ratify(r)
raster::ratify(r)
raster::ratify(raster(r)
)
r2 <- r
rasterize(v,r2,field = 'INVENTORY_STANDARD_CD')
val(r2)
values<-(r2)
r2
grain_order = c("clay", "silt", "sand")
grain_char = sample(grain_order, 36, replace = TRUE)
grain_fact = factor(grain_char, levels = grain_order)
grain = rast(nrows = 6, ncols = 6, resolution = 0.5,
xmin = -1.5, xmax = 1.5, ymin = -1.5, ymax = 1.5,
vals = grain_fact)
plot(grain)
lev <- levels(grain)[[1]]
lev
lev[,2] <- as.character(lev[,2])
lev
lev <- lev[, c("ID", "Class")]
levels(grain)
plot(grain)
writeRaster(grain,'D:/data/data_projects/pspl_test/'rat.tif')
levels(grain)[[1]] = c(levels(grain)[[1]], wetness = c("wet", "moist", "dry"))
levels(grain)
plot(grain)
tif_only
library(sf)
library(terra)
library(RPostgreSQL)
# set up for load to PostgreSQL
schema <- 'msyt_2022'
opt <- paste0("-c search_path=",schema)
user_name <- 'postgres'
database <- 'msyt'
con <- dbConnect('PostgreSQL',dbname=database,user=user_name,options=opt)
# read Provincial fid tif
fn1 <- paste0(substr(getwd(),1,1),':/data/data_projects/AR2022/PSPL/vri_raster.tif')
raster_fid <- rast(fn1)
# this is where the unzipped files are placed locally
local_pspl_folder <- paste0(substr(getwd(),1,1),':/data/data_projects/AR2022/PSPL/gdb_data')
# build list of the PSPL gdbs
# list of gdb files to process
f_list <- list.files(local_pspl_folder,full.names = TRUE)
num_gdb = length(f_list)  #number of files to process
rast_intersect <- function(r,pf,n){
# r = PROV raster of fid
# p = PSPL point set
# n = counter
# read the point file
p <- vect(pf)
# lower case the names
names(p) <- c("id_tag","at_si","ba_si","bg_si","bl_si","cw_si","dr_si","ep_si","fd_si","hm_si","hw_si","lt_si","lw_si","pa_si","pl_si","pw_si","py_si","sb_si","se_si","ss_si","sw_si","sx_si","yc_si","bapid","pem_spp","bgc_label","tsa_number")
# number points i pspl
n_points <- nrow(p)
# add id to point data
p$pspl_id <- seq(1:nrow(p))
#crop raster to point extent + 51
# define extent from p add 1 m all around
e <- ext(p)
e[1] <- e[1] - 51
e[2] <- e[2] + 51
e[3] <- e[3] - 51
e[4] <- e[4] + 51
# crop the raster using the extent
rc <- crop(r,e)
# extract the raster data at the x,y of the points
x <- extract(rc,p)
# drop the geometry by changing to data frame
p <- as.data.frame(p)
# join raster data feature_id
p$feature_id <- x[,"feature_id"]
# join raster data gr_skey
p$gr_skey <- x[,"gr_skey"]
# set to 1 decimal place
# this matches the output from the Biophysical model
# note that this works for CSV
# export to PostgreSQL will keep as double
# unless field.types are specified
# but this has to be a named vector
# handle the conversion in SQL
p[, 2:23] <- round(p[, 2:23], digits = 1)
# add a table number to allow tracking
p$tab_no <- n
# at this point can drop anything with a NULL feature_id
# or can do this as firest step in SQL
# export to csv, append if exists
#fn3 <- paste0(substr(getwd(),1,1),':/Data/data_projects/PSPL_2021/data/csv/csv',n,'.csv')
#data.table::fwrite(p,fn3,sep=',',append=FALSE)
# load to PostgreSQL
if (n ==1) {
dbWriteTable(con,'pspl_raw',p,row.names=FALSE,overwrite=TRUE)
} else {
dbWriteTable(con,'pspl_raw',p,row.names=FALSE,overwrite=FALSE,append = TRUE)
}
rows_out <- nrow(p)
fo <- data.frame('num_points' = n_points,'rows_out' = rows_out, 'n' = n)
return(fo)
}
# creates unit1 .. unitxx depending on the number of GDBs
# unit1 does NOT refer to tsa 01
# it is simply a reference number
if(length(f_list) ==0 ) { print("file list EMPTY")}
# initialize the counter
n <- 1
report <- data.frame('num_points' = '','rows_out' = '', 'n' = '')
report
f_list
raster_fid
f1 <- f_list[1]
f1
a <- rast_intersect(raster_fid,f1,1)
f1
p <- vect(f1)
head(p)
names(p) <- c("id_tag","at_si","ba_si","bg_si","bl_si","cw_si","dr_si","ep_si","fd_si","hm_si","hw_si","lt_si","lw_si","pa_si","pl_si","pw_si","py_si","sb_si","se_si","ss_si","sw_si","sx_si","yc_si","bapid","pem_spp","bgc_label","tsa_number")
n_points <- nrow(p)
p$pspl_id <- seq(1:nrow(p))
e <- ext(p)
e[1] <- e[1] - 51
e[2] <- e[2] + 51
e[3] <- e[3] - 51
e[4] <- e[4] + 51
e
rc <- crop(raster_fid,e)
x <- extract(rc,p)
head(x)
p <- as.data.frame(p)
head(p)
head(p)
x
head(x)
dest
library(sf)
library(terra)
library(RPostgreSQL)
# set up for load to PostgreSQL
schema <- 'msyt_2022'
opt <- paste0("-c search_path=",schema)
user_name <- 'postgres'
database <- 'msyt'
con <- dbConnect('PostgreSQL',dbname=database,user=user_name,options=opt)
# read Provincial fid tif
fn1 <- paste0(substr(getwd(),1,1),':/data/data_projects/AR2022/PSPL/vri_raster.tif')
raster_fid <- rast(fn1)
# this is where the unzipped files are placed locally
local_pspl_folder <- paste0(substr(getwd(),1,1),':/data/data_projects/AR2022/PSPL/gdb_data')
# build list of the PSPL gdbs
# list of gdb files to process
f_list <- list.files(local_pspl_folder,full.names = TRUE)
num_gdb = length(f_list)  #number of files to process
# creates unit1 .. unitxx depending on the number of GDBs
# unit1 does NOT refer to tsa 01
# it is simply a reference number
if(length(f_list) ==0 ) { print("file list EMPTY")}
# initialize the counter
n <- 1
# create reporting data frame
report <- data.frame('num_points' = '','rows_out' = '', 'n' = '')
f1 <- f_list[1]
p <- vect(f1)
names(p) <- c("id_tag","at_si","ba_si","bg_si","bl_si","cw_si","dr_si","ep_si","fd_si","hm_si","hw_si","lt_si","lw_si","pa_si","pl_si","pw_si","py_si","sb_si","se_si","ss_si","sw_si","sx_si","yc_si","bapid","pem_spp","bgc_label","tsa_number")
# number points i pspl
n_points <- nrow(p)
p$pspl_id <- seq(1:nrow(p))
e <- ext(p)
e[1] <- e[1] - 51
e[2] <- e[2] + 51
e[3] <- e[3] - 51
e[4] <- e[4] + 51
# crop the raster using the extent
rc <- crop(r,e)
rc <- crop(raster_fid,e)
x <- extract(rc,p)
p <- as.data.frame(p)
head(x)
head(p)
p$feature_id <- x[,"feature_id"]
p[, 2:23] <- round(p[, 2:23], digits = 1)
p <- vect(f1)
P[1]
p[1]
head9p0
head(P)
head(p)
