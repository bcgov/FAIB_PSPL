con <- dbConnect('PostgreSQL',dbname='msyt',user=user_name,options=opt)
year <- '2022'
library(RPostgreSQL)
library(tidyverse)
library(data.table)
library(ggplot2)
# set up for schema and user
schema <- 'msyt_2022'
opt <- paste0("-c search_path=",schema)
user_name <- 'postgres'
database <- 'msyt'
con <- dbConnect('PostgreSQL',dbname='msyt',user=user_name,options=opt)
#load the R code for site index conversions
si_convert <- paste0(getwd(),'/site_index_conversion_equations_v2.r')
source(si_convert, local = knitr::knit_global())
# pre-delete
if(dbExistsTable(con,'pspl_bec_site_index')) {
dbRemoveTable(con,'pspl_bec_site_index')
}
if(dbExistsTable(con,'pspl_fid_site_index')) {
dbRemoveTable(con,'pspl_fid_site_index')
}
if(dbExistsTable(con,'pspl_op_site_index')) {
dbRemoveTable(con,'pspl_op_site_index')
}
dbExecute(con,'alter table pspl_bec_site_index_post_convert rename to pspl_bec_site_index')
dbExecute(con,'alter table pspl_fid_site_index_post_convert rename to pspl_fid_site_index')
dbExecute(con,'alter table pspl_op_site_index_post_convert rename to pspl_op_site_index')
if(dbExistsTable(con,'pspl_fid_site_index_pre_convert')) {
dbRemoveTable(con,'pspl_fid_site_index_pre_convert')
}
if(dbExistsTable(con,'pspl_op_site_index_pre_convert')) {
dbRemoveTable(con,'pspl_op_site_index_pre_convert')
}
if(dbExistsTable(con,'pspl_bec_site_index_pre_convert')) {
dbRemoveTable(con,'pspl_bec_site_index_pre_convert')
}
if(dbExistsTable(con,'pspl_init')) {
dbRemoveTable(con,'pspl_init')
}
if(dbExistsTable(con,'pspl_raw')) {
dbRemoveTable(con,'pspl_raw')
}
library(RPostgreSQL)
library(data.table)
# set up for schema and user
schema <- 'msyt_2022'
opt <- paste0("-c search_path=",schema)
user_name <- 'results'
database <- 'msyt'
con <- dbConnect('PostgreSQL',dbname='msyt',user=user_name,options=opt)
#con <- dbConnect('PostgreSQL',dbname='msyt',user=user_name)
large_table <- fread('D:/data/data_projects/AR2022/PSPL/si_data/pspl_raw.csv',sep=',')
year <- '2022'
library(RPostgreSQL)
library(tidyverse)
library(data.table)
library(ggplot2)
# set up for schema and user
schema <- 'msyt_2022'
opt <- paste0("-c search_path=",schema)
user_name <- 'results'
database <- 'msyt'
con <- dbConnect('PostgreSQL',dbname='msyt',user=user_name,options=opt)
q1 <- 'select *  from msyt_2022.pspl_fid_site_index_pre_convert'
avg_fid_data <- dbGetQuery(con,q1)
dbDisconnect(con)
library(RPostgreSQL)
library(tidyverse)
library(data.table)
library(ggplot2)
# set up for schema and user
schema <- 'msyt_2022'
opt <- paste0("-c search_path=",schema)
user_name <- 'results'
database <- 'msyt'
con <- dbConnect('PostgreSQL',dbname='msyt',user=user_name,options=opt)
q1 <- 'select *  from msyt_2022.pspl_fid_site_index_pre_convert'
avg_fid_data <- dbGetQuery(con,q1)
q1 <- 'select *  from msyt_2022.pspl_fid_site_index_pre_convert'
avg_fid_data <- dbGetQuery(con,q1)
dbDisconnect(con)
year <- '2022'
library(RPostgreSQL)
library(tidyverse)
library(data.table)
library(ggplot2)
# set up for schema and user
schema <- 'msyt_2022'
opt <- paste0("-c search_path=",schema)
user_name <- 'results'
database <- 'msyt'
con <- dbConnect('PostgreSQL',dbname='msyt',user=user_name,options=opt)
#load the R code for site index conversions
si_convert <- paste0(getwd(),'/site_index_conversion_equations_v2.r')
source(si_convert, local = knitr::knit_global())
# read avg_BEC_data: table = psql_bec_site_index_pre_convert
q1 <- paste0('select *  from msyt_',year,'.pspl_site_index_pre_convert_bec')
r1 <- dbSendQuery(con,q1)
avg_BEC_data <- dbFetch(r1,n=-1)
setDT(avg_BEC_data)
avg_BEC_data <- si_convert(avg_BEC_data)
## Substitute for MHmmp
mm <- avg_BEC_data %>% subset(bec_zone == 'MH' & bec_subzone == 'mm')
avg_BEC_data <- avg_BEC_data %>% subset(paste0(bec_zone,bec_subzone) != 'MHmmp' )
mm$bec_subzone <- 'mmp'
avg_BEC_data <- rbind(avg_BEC_data,mm)
## substitute for SWB mk,mks,un
# delete the older data
# all SWB data is blank
avg_BEC_data <- avg_BEC_data %>% subset(bec_zone != 'SWB')
swb1 <- avg_BEC_data %>% subset(bec_zone == 'BWBS' & bec_subzone == 'dk')
swb1$bec_zone <- 'SWB'
swb1$bec_subzone <- 'mk'
swb2 <- swb1
swb3 <- swb1
swb2$bec_zone <- 'SWB'
swb2$bec_subzone <- 'mks'
swb3$bec_zone <- 'SWB'
swb3$bec_subzone <- 'un'
avg_BEC_data <- rbind(avg_BEC_data,swb1,swb2,swb3)
# write the data
file_name <- paste0(substr(getwd(),1,1),':/data/data_projects/AR',year,'/PSPL/si_data/pspl_site_index_bec.csv')
fwrite(avg_BEC_data, file_name, col.names=TRUE, row.names=FALSE, quote = FALSE, sep=",")
tbl_name <- paste0('pspl_site_index_bec')
# pre delete table
if(dbExistsTable(con,tbl_name)) {
dbRemoveTable(con,tbl_name)
}
# write to table
dbWriteTable(con,tbl_name,avg_BEC_data,row.names = FALSE)
# read avg_op_data: table = pspl_site_index_pre_convert_op
q1 <- 'select *  from msyt_2022.pspl_site_index_pre_convert_op'
avg_op_data <- dbGetQuery(con,q1)
setDT(avg_op_data)
# run the conversion
avg_op_data <- si_convert(avg_op_data)
# update from BEC
avg_op_data[avg_BEC_data, on=c("bec_zone","bec_subzone"), at_si := ifelse(at_si==0, i.at_si,at_si)]
avg_op_data[avg_BEC_data, on=c("bec_zone","bec_subzone"), ba_si := ifelse(ba_si==0, i.ba_si,ba_si)]
avg_op_data[avg_BEC_data, on=c("bec_zone","bec_subzone"), bg_si := ifelse(bg_si==0, i.bg_si,bg_si)]
avg_op_data[avg_BEC_data, on=c("bec_zone","bec_subzone"), bl_si := ifelse(bl_si==0, i.bl_si,bl_si)]
avg_op_data[avg_BEC_data, on=c("bec_zone","bec_subzone"), cw_si := ifelse(cw_si==0, i.cw_si,cw_si)]
avg_op_data[avg_BEC_data, on=c("bec_zone","bec_subzone"), dr_si := ifelse(dr_si==0, i.dr_si,dr_si)]
avg_op_data[avg_BEC_data, on=c("bec_zone","bec_subzone"), ep_si := ifelse(ep_si==0, i.ep_si,ep_si)]
avg_op_data[avg_BEC_data, on=c("bec_zone","bec_subzone"), fd_si := ifelse(fd_si==0, i.fd_si,fd_si)]
avg_op_data[avg_BEC_data, on=c("bec_zone","bec_subzone"), hm_si := ifelse(hm_si==0, i.hm_si,hm_si)]
avg_op_data[avg_BEC_data, on=c("bec_zone","bec_subzone"), hw_si := ifelse(hw_si==0, i.hw_si,hw_si)]
avg_op_data[avg_BEC_data, on=c("bec_zone","bec_subzone"), lt_si := ifelse(lt_si==0, i.lt_si,lt_si)]
avg_op_data[avg_BEC_data, on=c("bec_zone","bec_subzone"), lw_si := ifelse(lw_si==0, i.lw_si,lw_si)]
avg_op_data[avg_BEC_data, on=c("bec_zone","bec_subzone"), pa_si := ifelse(pa_si==0, i.pa_si,pa_si)]
avg_op_data[avg_BEC_data, on=c("bec_zone","bec_subzone"), pl_si := ifelse(pl_si==0, i.pl_si,pl_si)]
avg_op_data[avg_BEC_data, on=c("bec_zone","bec_subzone"), pw_si := ifelse(pw_si==0, i.pw_si,pw_si)]
avg_op_data[avg_BEC_data, on=c("bec_zone","bec_subzone"), py_si := ifelse(py_si==0, i.py_si,py_si)]
avg_op_data[avg_BEC_data, on=c("bec_zone","bec_subzone"), sb_si := ifelse(sb_si==0, i.sb_si,sb_si)]
avg_op_data[avg_BEC_data, on=c("bec_zone","bec_subzone"), se_si := ifelse(se_si==0, i.se_si,se_si)]
avg_op_data[avg_BEC_data, on=c("bec_zone","bec_subzone"), ss_si := ifelse(ss_si==0, i.ss_si,ss_si)]
avg_op_data[avg_BEC_data, on=c("bec_zone","bec_subzone"), sw_si := ifelse(sw_si==0, i.sw_si,sw_si)]
avg_op_data[avg_BEC_data, on=c("bec_zone","bec_subzone"), sx_si := ifelse(sx_si==0, i.sx_si,sx_si)]
avg_op_data[avg_BEC_data, on=c("bec_zone","bec_subzone"), yc_si := ifelse(yc_si==0, i.yc_si,yc_si)]
# add src
avg_op_data$si_src <- 'PSPL'
# writeout the post conversion file
file_name <-  paste0(substr(getwd(),1,1),':/data/data_projects/AR',year,'/PSPL/si_data/pspl_site_index_op.csv')
fwrite(avg_op_data, file_name, col.names=TRUE, row.names=FALSE, quote = FALSE, sep=",")
tbl_name <- paste0('pspl_site_index_op')
# pre delete table
if(dbExistsTable(con,tbl_name)) {
dbRemoveTable(con,tbl_name)
}
dbWriteTable(con,tbl_name,avg_op_data,row.names = FALSE)
# read avg_fid_data: table = pspl_site_index_pre_convert_fid
# this is the mean value feature_id data
q1 <- paste0('select *  from msyt_',year,'.pspl_site_index_pre_convert_fid')
avg_fid_data <- dbGetQuery(con,q1)
setDT(avg_fid_data)
# note that si_convert required 0 in place of NA
# si_convert will handle this
# run the SI conversions
avg_fid_data <- si_convert(avg_fid_data)
# read avg_fid_data: table = pspl_site_index_pre_convert_fid
# this is the mean value feature_id data
q1 <- paste0('select *  from msyt_',year,'.pspl_site_index_pre_convert_fid')
avg_fid_data <- dbGetQuery(con,q1)
setDT(avg_fid_data)
avg_fid_data <- si_convert(avg_fid_data)
x1 <- avg_fid_data %>% subset(featire_id %in% c(6171867, 6171929, 6171742, 6171657, 6171983, 6171632, 6171837, 6171666,6171824, 6171792))
x1 <- avg_fid_data %>% subset(feature_id %in% c(6171867, 6171929, 6171742, 6171657, 6171983, 6171632, 6171837, 6171666,6171824, 6171792))
x1
x1 <- x1 %>% select(feature_id, ba_si,fd_si,pl_si,se_si, bec_zone, bec_subzone)
x1
x2 <- avg_op_data %>% subset(opening_id = -258070000) %>% select(opening_id, ba_si,fd_si,pl_si,se_si, bec_zone, bec_subzone)
x2
x2 <- avg_op_data %>% subset(opening_id == -258070000) %>% select(opening_id, ba_si,fd_si,pl_si,se_si, bec_zone, bec_subzone)
x2
x1
x2$opening_id <- -258070000
x1[x2, on=c("opening_id"), ba_si := ifelse(ba_si==0, i.ba_si,ba_si)]
x1
x1$opening_id <- -258070000
x1[x2, on=c("opening_id"), ba_si := ifelse(ba_si==0, i.ba_si,ba_si)]
x1
x1 <- avg_fid_data %>% subset(feature_id %in% c(6171867, 6171929, 6171742, 6171657, 6171983, 6171632, 6171837, 6171666,6171824, 6171792))
x1 <- x1 %>% select(feature_id, ba_si,fd_si,pl_si,se_si, bec_zone, bec_subzone)
x1$opening_id <- -258070000
x2 <- avg_op_data %>% subset(opening_id == -258070000) %>% select(opening_id, ba_si,fd_si,pl_si,se_si, bec_zone, bec_subzone)
x1
x1 <- avg_fid_data %>% subset(feature_id %in% c(6171867, 6171929, 6171742, 6171657, 6171983, 6171632, 6171837, 6171666,6171824, 6171792))
x1 <- x1 %>% select(feature_id, ba_si,fd_si,pl_si,se_si, bec_zone, bec_subzone) %>% arrange(bec_zone,bec_subzone)
x1$opening_id <- -258070000
x1
x1[x2, on=c("opening_id"), ba_si := ifelse(ba_si==0, i.ba_si,ba_si)]
x1
x1[x2, on=c("opening_id"), pl_si := ifelse(pl_si==0, i.pl_si,pl_si)]
x1
fid_op <- dbGetQuery(con,'select feature_id,opening_id from veg_comp where opening_id is not null and opening_id not in (0,-99)')
fid_op[fid_op$feature_id==6171632  ,]
avg_fid_data <- left_join(avg_fid_data,fid_op)
avg_op_data[avg_op_data$opening_id==-258070000,]
avg_fid_data[avg_fid_data$feature_id==6171632 ,]
avg_fid_data[avg_fid_data$feature_id==6171824 ,]
avg_fid_data[avg_op_data, on=c("opening_id"), at_si := ifelse(at_si==0, i.at_si,at_si)]
avg_fid_data[avg_fid_data$feature_id==6171824 ,]
avg_fid_data[avg_op_data, on=c("opening_id"), ba_si := ifelse(ba_si==0, i.ba_si,ba_si)]
avg_fid_data[avg_op_data, on=c("opening_id"), bg_si := ifelse(bg_si==0, i.bg_si,bg_si)]
avg_fid_data[avg_op_data, on=c("opening_id"), bl_si := ifelse(bl_si==0, i.bl_si,bl_si)]
avg_fid_data[avg_op_data, on=c("opening_id"), cw_si := ifelse(cw_si==0, i.cw_si,cw_si)]
avg_fid_data[avg_op_data, on=c("opening_id"), dr_si := ifelse(dr_si==0, i.dr_si,dr_si)]
avg_fid_data[avg_op_data, on=c("opening_id"), ep_si := ifelse(ep_si==0, i.ep_si,ep_si)]
avg_fid_data[avg_op_data, on=c("opening_id"), fd_si := ifelse(fd_si==0, i.fd_si,fd_si)]
avg_fid_data[avg_op_data, on=c("opening_id"), hm_si := ifelse(hm_si==0, i.hm_si,hm_si)]
avg_fid_data[avg_op_data, on=c("opening_id"), hw_si := ifelse(hw_si==0, i.hw_si,hw_si)]
avg_fid_data[avg_op_data, on=c("opening_id"), lt_si := ifelse(lt_si==0, i.lt_si,lt_si)]
avg_fid_data[avg_op_data, on=c("opening_id"), lw_si := ifelse(lw_si==0, i.lw_si,lw_si)]
avg_fid_data[avg_op_data, on=c("opening_id"), pa_si := ifelse(pa_si==0, i.pa_si,pa_si)]
avg_fid_data[avg_op_data, on=c("opening_id"), pl_si := ifelse(pl_si==0, i.pl_si,pl_si)]
avg_fid_data[avg_op_data, on=c("opening_id"), pw_si := ifelse(pw_si==0, i.pw_si,pw_si)]
avg_fid_data[avg_op_data, on=c("opening_id"), py_si := ifelse(py_si==0, i.py_si,py_si)]
avg_fid_data[avg_op_data, on=c("opening_id"), sb_si := ifelse(sb_si==0, i.sb_si,sb_si)]
avg_fid_data[avg_op_data, on=c("opening_id"), se_si := ifelse(se_si==0, i.se_si,se_si)]
avg_fid_data[avg_op_data, on=c("opening_id"), ss_si := ifelse(ss_si==0, i.ss_si,ss_si)]
avg_fid_data[avg_op_data, on=c("opening_id"), sw_si := ifelse(sw_si==0, i.sw_si,sw_si)]
avg_fid_data[avg_op_data, on=c("opening_id"), sx_si := ifelse(sx_si==0, i.sx_si,sx_si)]
avg_fid_data[avg_op_data, on=c("opening_id"), yc_si := ifelse(yc_si==0, i.yc_si,yc_si)]
avg_fid_data[avg_fid_data$feature_id==6171824 ,]
year <- '2022'
library(RPostgreSQL)
library(tidyverse)
library(data.table)
library(ggplot2)
# set up for schema and user
schema <- 'msyt_2022'
opt <- paste0("-c search_path=",schema)
user_name <- 'results'
database <- 'msyt'
con <- dbConnect('PostgreSQL',dbname='msyt',user=user_name,options=opt)
#load the R code for site index conversions
#  Versions to test
#si_convert <- paste0(getwd(),'/site_index_conversion_equations_v2a.r')
#si_convert <- paste0(getwd(),'/site_index_conversion_equations_v2b.r')
si_convert <- paste0(getwd(),'/site_index_conversion_equations_v2c.r')
source(si_convert, local = knitr::knit_global())
# read avg_fid_data: table = pspl_site_index_pre_convert_fid
# this is the mean value feature_id data
q1 <- paste0('select *  from msyt_',year,'.pspl_site_index_pre_convert_fid')
avg_fid_data <- dbGetQuery(con,q1)
head(avg_fid_data)
avg_fid_data %>% avg_fid_data %>% select(-bec_zone,-bec_subzone)
avg_fid_data <-  avg_fid_data %>% select(-bec_zone,-bec_subzone)
bec_fid <- dbGetQuery(con,'select feature_id,bec_zone,bec_subzone from bec11')
avg_fid_data <- left_join(avg_fid_data,bec_fid,by='feature_id')
avg_fid_data[avg_fid_data$feature_id == 3324060,]
year <- '2022'
library(RPostgreSQL)
library(tidyverse)
library(data.table)
library(ggplot2)
library(kableExtra)
# set up for schema and user
schema <- 'msyt_2022'
opt <- paste0("-c search_path=",schema)
user_name <- 'results'
database <- 'msyt'
con <- dbConnect('PostgreSQL',dbname='msyt',user=user_name,options=opt)
#load the R code for site index conversions
si_convert <- paste0(getwd(),'/site_index_conversion_equations_v3.r')
source(si_convert, local = knitr::knit_global())
kablep <- function (x) {
kable(x) %>%
kable_styling(bootstrap_options = c("striped"),full_width=F,font_size=13,position = 'left')
}
# function to derive where species do no have a site index
assign_missing <- function(d){
setDF(d)
# set NA to 0
d[is.na(d)] <- 0
# convert 3 char species to 2 char
# Cwc,Fdc,Hwc
d$species <- gsub('Cwc','Cw',d$species)
d$species <- gsub('Cwi','Cw',d$species)
d$species <- gsub('Fdc','Fd',d$species)
d$species <- gsub('Fdi','Fd',d$species)
d$species <- gsub('Hwc','Hw',d$species)
d$species <- gsub('Hwi','Hw',d$species)
d$missing <- ''
d$missing <- case_when(
grepl('At',d$species) & d$at_si == 0 ~ 'At',
TRUE ~ ''
)
sp <- c('Ba','Bg','Bl','Cw','Dr','Ep','Fd','Hm','Hw','Lt','Lw','Pa','Pl','Pw','Py','Sb','Se','Ss','Sw','Yc')
# use the at_si column as reference
n <- which(colnames(d)=='at_si')
#n <- 3
for (s in sp) {
n <- n + 1
d$missing <- case_when(
grepl(s,d$species) & d[,n] == 0 ~ paste0(d$missing,':',s),
TRUE ~ paste0(d$missing,'')
)
}
return(d)
}
call_si_conversion <- function(inp,tag) {
# cast to table
dt <- setDT(inp)
# ************************************
# Fix Sx: Sw, Se and Ss from Sx based on BEC
if(tag == 0) {
inp$sw_si <- case_when(
!inp$bec_zone %in% c('CDF','CWH','MH') & inp$bec_zone != 'ESSF' & inp$sx_si != 0 ~ inp$sx_si,
TRUE ~ inp$sw_si
)
inp$se_si <- case_when(
inp$bec_zone == 'ESSF' & inp$sx_si != 0 ~ inp$sx_si,
TRUE ~ inp$se_si
)
inp$ss_si <- case_when(
inp$bec_zone %in% c('CDF','CWH','MH') & inp$sx_si != 0 ~ inp$sx_si,
TRUE ~ inp$ss_si
)
}
#### Spruce
# ********************************************************************
# Spruce   Se Sw Sx all interchange
# set sw = sx
dt$sw_si[which(dt$sw_si==0)] <- convert_sw_from_sx(dt[which(dt$sw_si==0)])
# set sw = se
dt$sw_si[which(dt$sw_si==0)] <- convert_sw_from_se(dt[which(dt$sw_si==0)])
# set se = sw
dt$se_si[which(dt$se_si==0)] <- convert_se_from_sw(dt[which(dt$se_si==0)])
# set ss = sx
dt$ss_si[which(dt$ss_si==0)] <- convert_ss_from_sx(dt[which(dt$ss_si==0)])
#### Spruce
# **************************************************************************
# sp <- At 'Ba','Bg','Bl','Cw','Dr','Ep','Fd','Hm','Hw','Lt','Lw','Pa','Pl','Pw','Py','Sb','Se','Ss','Sw','Yc')
# At
dt$at_si[which(dt$at_si==0 & grepl('At',dt$missing))] <- convert_at_si(dt[which(dt$at_si==0 & grepl('At',dt$missing))])
# Ba
dt$ba_si[which(dt$ba_si==0 & grepl('Ba',dt$missing))] <- convert_ba_si(dt[which(dt$ba_si==0 & grepl('Ba',dt$missing))])
# Bl
dt$bl_si[which(dt$bl_si==0 & grepl('Bl',dt$missing))] <- convert_bl_si(dt[which(dt$bl_si==0 & grepl('Bl',dt$missing))])
# Cwc
dt$cw_si[which(dt$cw_si==0 & grepl('Cw',dt$missing))] <- convert_cw_si(dt[which(dt$cw_si==0 & grepl('Cw',dt$missing))])
# Fdc
dt$fd_si[which(dt$fd_si==0 & grepl('Fd',dt$missing) & dt$bec_zone %in% c('CDF','CWH','MH') )] <- convert_fdc_si(dt[which(dt$fd_si==0 & grepl('Fd',dt$missing) & dt$bec_zone %in% c('CDF','CWH','MH') )])
# Fdi
dt$fd_si[which(dt$fd_si==0 & grepl('Fd',dt$missing) & !dt$bec_zone %in% c('CDF','CWH','MH') )] <- convert_fdi_si(dt[which(dt$fd_si==0 & grepl('Fd',dt$missing) & !dt$bec_zone %in% c('CDF','CWH','MH') )])
# hw coast
dt$hw_si[which(dt$hw_si==0 & grepl('Hw',dt$missing) & dt$bec_zone %in% c('CDF','CWH','MH') )] <- convert_hwc_si(dt[which(dt$hw_si==0 & grepl('Hw',dt$missing) & dt$bec_zone %in% c('CDF','CWH','MH') )])
# hw interior
dt$hw_si[which(dt$hw_si==0 & grepl('Hw',dt$missing) & !dt$bec_zone %in% c('CDF','CWH','MH') )] <- convert_hwi_si(dt[which(dt$hw_si==0 & grepl('Hw',dt$missing) & !dt$bec_zone %in% c('CDF','CWH','MH') )])
# Lw
dt$lw_si[which(dt$lw_si==0)] <- convert_lw_si(dt[which(dt$lw_si==0)])
# Pl
dt$pl_si[which(dt$pl_si==0)] <- convert_pl_si(dt[which(dt$pl_si==0)])
# Sb
dt$sb_si[which(dt$sb_si==0)] <- convert_sb_si(dt[which(dt$sb_si==0)])
# Ss (coastal)
dt$ss_si[which(dt$ss_si==0)] <- convert_ss_si(dt[which(dt$ss_si==0)])
# Sw
dt$sw_si[which(dt$sw_si==0)] <- convert_sw_si(dt[which(dt$sw_si==0)])
# Pw
dt$pw_si[which(dt$pw_si==0 & grepl('Pw',dt$missing))] <- convert_pw(dt[which(dt$pw_si==0 & grepl('Pw',dt$missing))])
# Pa
dt$pa_si[which(dt$pa_si==0 & grepl('Pa',dt$missing))] <- convert_pa(dt[which(dt$pa_si==0 & grepl('Pa',dt$missing))])
# Py
dt$py_si[which(dt$py_si==0 & grepl('Py',dt$missing))] <- convert_py(dt[which(dt$py_si==0 & grepl('Py',dt$missing))])
# Dr Coast/Interior
dt$dr_si[which(dt$dr_si==0 & grepl('Dr',dt$missing))] <- convert_dr(dt[which(dt$dr_si==0 & grepl('Dr',dt$missing))])
# 1-1
# Bg 1-1
dt$bg_si[which(dt$bg_si==0 & grepl('Bg',dt$missing))] <- convert_bg(dt[which(dt$bg_si==0 & grepl('Bg',dt$missing))])
dt$bl_si[which(dt$bl_si==0 & grepl('Bl',dt$missing))] <- convert_bl(dt[which(dt$bl_si==0 & grepl('Bl',dt$missing))])
dt$ba_si[which(dt$ba_si==0 & grepl('Ba',dt$missing))] <- convert_ba(dt[which(dt$ba_si==0 & grepl('Ba',dt$missing))])
# Lw Lt
dt$lt_si[which(dt$lt_si==0 & grepl('Lt',dt$missing))] <- convert_lt_from_lw(dt[which(dt$lt_si==0 & grepl('Lt',dt$missing))])
# ********************************************************************
# Spruce   Se Sw Sx all interchange
# set sw = sx
dt$sw_si[which(dt$sw_si==0)] <- convert_sw_from_sx(dt[which(dt$sw_si==0)])
# set sw = se
dt$sw_si[which(dt$sw_si==0)] <- convert_sw_from_se(dt[which(dt$sw_si==0)])
# set se = sw
dt$se_si[which(dt$se_si==0)] <- convert_se_from_sw(dt[which(dt$se_si==0)])
# set ss = sx
dt$ss_si[which(dt$ss_si==0)] <- convert_ss_from_sx(dt[which(dt$ss_si==0)])
# can not do this because opening id can be negative
#dt[dt <0 ] <- 0.0
dt$at_si[dt$at_si < 0 ] <- 0.0
dt$ba_si[dt$ba_si < 0 ] <- 0.0
dt$bg_si[dt$bg_si < 0 ] <- 0.0
dt$bl_si[dt$bl_si < 0 ] <- 0.0
dt$cw_si[dt$cw_si < 0 ] <- 0.0
dt$dr_si[dt$dr_si < 0 ] <- 0.0
dt$ep_si[dt$ep_si < 0 ] <- 0.0
dt$fd_si[dt$fd_si < 0 ] <- 0.0
dt$hm_si[dt$hm_si < 0 ] <- 0.0
dt$hw_si[dt$hw_si < 0 ] <- 0.0
dt$lt_si[dt$lt_si < 0 ] <- 0.0
dt$lw_si[dt$lw_si < 0 ] <- 0.0
dt$pa_si[dt$pa_si < 0 ] <- 0.0
dt$pl_si[dt$pl_si < 0 ] <- 0.0
dt$pw_si[dt$pw_si < 0 ] <- 0.0
dt$py_si[dt$py_si < 0 ] <- 0.0
dt$sb_si[dt$sb_si < 0 ] <- 0.0
dt$se_si[dt$se_si < 0 ] <- 0.0
dt$ss_si[dt$ss_si < 0 ] <- 0.0
dt$sw_si[dt$sw_si < 0 ] <- 0.0
dt$sx_si[dt$sx_si < 0 ] <- 0.0
dt$yc_si[dt$yc_si < 0 ] <- 0.0
#convert to numeric 1
dt <- dt %>% mutate_if(is.numeric, round, digits=1)
return(dt)
}
bec_conversions <- function(inp){
setDT(inp)
inp[avg_BEC_data, on=c("bec_zone","bec_subzone"), at_si := ifelse(at_si==0, i.at_si,at_si)]
inp[avg_BEC_data, on=c("bec_zone","bec_subzone"), ba_si := ifelse(ba_si==0, i.ba_si,ba_si)]
inp[avg_BEC_data, on=c("bec_zone","bec_subzone"), bg_si := ifelse(bg_si==0, i.bg_si,bg_si)]
inp[avg_BEC_data, on=c("bec_zone","bec_subzone"), bl_si := ifelse(bl_si==0, i.bl_si,bl_si)]
inp[avg_BEC_data, on=c("bec_zone","bec_subzone"), cw_si := ifelse(cw_si==0, i.cw_si,cw_si)]
inp[avg_BEC_data, on=c("bec_zone","bec_subzone"), dr_si := ifelse(dr_si==0, i.dr_si,dr_si)]
inp[avg_BEC_data, on=c("bec_zone","bec_subzone"), ep_si := ifelse(ep_si==0, i.ep_si,ep_si)]
inp[avg_BEC_data, on=c("bec_zone","bec_subzone"), fd_si := ifelse(fd_si==0, i.fd_si,fd_si)]
inp[avg_BEC_data, on=c("bec_zone","bec_subzone"), hm_si := ifelse(hm_si==0, i.hm_si,hm_si)]
inp[avg_BEC_data, on=c("bec_zone","bec_subzone"), hw_si := ifelse(hw_si==0, i.hw_si,hw_si)]
inp[avg_BEC_data, on=c("bec_zone","bec_subzone"), lt_si := ifelse(lt_si==0, i.lt_si,lt_si)]
inp[avg_BEC_data, on=c("bec_zone","bec_subzone"), lw_si := ifelse(lw_si==0, i.lw_si,lw_si)]
inp[avg_BEC_data, on=c("bec_zone","bec_subzone"), pa_si := ifelse(pa_si==0, i.pa_si,pa_si)]
inp[avg_BEC_data, on=c("bec_zone","bec_subzone"), pl_si := ifelse(pl_si==0, i.pl_si,pl_si)]
inp[avg_BEC_data, on=c("bec_zone","bec_subzone"), pw_si := ifelse(pw_si==0, i.pw_si,pw_si)]
inp[avg_BEC_data, on=c("bec_zone","bec_subzone"), py_si := ifelse(py_si==0, i.py_si,py_si)]
inp[avg_BEC_data, on=c("bec_zone","bec_subzone"), sb_si := ifelse(sb_si==0, i.sb_si,sb_si)]
inp[avg_BEC_data, on=c("bec_zone","bec_subzone"), se_si := ifelse(se_si==0, i.se_si,se_si)]
inp[avg_BEC_data, on=c("bec_zone","bec_subzone"), ss_si := ifelse(ss_si==0, i.ss_si,ss_si)]
inp[avg_BEC_data, on=c("bec_zone","bec_subzone"), sw_si := ifelse(sw_si==0, i.sw_si,sw_si)]
inp[avg_BEC_data, on=c("bec_zone","bec_subzone"), sx_si := ifelse(sx_si==0, i.sx_si,sx_si)]
inp[avg_BEC_data, on=c("bec_zone","bec_subzone"), yc_si := ifelse(yc_si==0, i.yc_si,yc_si)]
return(inp)
}
# read avg_BEC_data: table = psql_bec_site_index_pre_convert
q1 <- paste0('select *  from msyt_',year,'.pspl_site_index_mean_bec')
avg_BEC_data <- dbGetQuery(con,q1)
# get species that are assigned from RESULTS
# can be a combination of Planted and Natural
species <- dbGetQuery(con,"select bec_zone,bec_subzone,array_to_string(species,',') as species from species_list_bec_agg")
# join species to BEC
avg_BEC_data <- left_join(avg_BEC_data,species)
df_base <- avg_BEC_data
#df <- avg_BEC_data
df_base$id <- 1:nrow(df_base)
df_base <- assign_missing(df_base)
# split into those with missing and those without
df <- df_base %>% subset(missing != '')
df_base <- df_base %>% subset(!id %in% df$id)
df <- call_si_conversion(df,0)
df <- assign_missing(df)
#x1 <- df %>% subset(missing != '')
# Force balsam BA Bg swap
# Lw Lt swap
#df$missing <- ':Ba:Bg:Bl:Lt'
#df <- call_si_conversion(df)
# back together
avg_BEC_data <- rbind(df_base,df)
#avg_BEC_data$missing <- ':Ba:Bg:Bl:Lt'
#avg_BEC_data <- call_si_conversion(avg_BEC_data)
#avg_BEC_data$missing <- ''
#x <- assign_missing(avg_BEC_data)
#x <- x %>% subset(missing != '')
# write the data
#file_name <- paste0(substr(getwd(),1,1),':/data/data_projects/AR',year,'/PSPL/si_data/pspl_site_index_bec.csv')
#fwrite(avg_BEC_data, file_name, col.names=TRUE, row.names=FALSE, quote = FALSE, sep=",")
#tbl_name <- paste0('pspl_site_index_bec')
# pre delete table
#if(dbExistsTable(con,tbl_name)) {
#  dbRemoveTable(con,tbl_name)
#}
# write to table
#dbWriteTable(con,tbl_name,avg_BEC_data,row.names = FALSE)
#q1 <- paste0('select *  from msyt_',year,'.pspl_site_index_mean_op')
q1 <- paste0('select *  from msyt_',year,'.pspl_site_index_mean_fid')
si_data <- dbGetQuery(con,q1)
#species <- dbGetQuery(con,"select opening_id,array_to_string(species,',') as species ,b.bec_zone,b.bec_subzone from species_list_op a left join veg_bec_op b using(opening_id)")
#species <- dbGetQuery(con,"select feature_id,array_to_string(species,',') as species ,bec_zone,bec_subzone from species_list_current_fid")
species <- dbGetQuery(con,"select feature_id,array_to_string(species,',') as species ,bec_zone,bec_subzone from species_list_future_fid")
#si_data <- left_join(species,si_data,by='opening_id')
si_data <- left_join(species,si_data,by='feature_id')
#avg_data <- avg_data %>% subset(!is.na(species))
# required to assing the missing
# si conversion only applis where there are missing values
si_data <- assign_missing(si_data)
head(si_data)
