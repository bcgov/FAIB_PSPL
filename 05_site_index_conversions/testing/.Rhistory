for (i in 1:nrow(cx)){
x <- cx[i,]
df[get(x$s2) > 0 ,dummy_si := x$b0 + ( x$b1* get(x$s2))]
}
df
df
for (i in 1:nrow(cx)){
x <- cx[i,]
df[get(x$s2) > 0 ,dummy_si := x$b0 + ( x$b1* get(x$s2))]
print(df$dummy_si)
}
df
df
df$sw <- 0
df$sx <- 0
df$bl <- 0
for (i in 1:nrow(cx)){
x <- cx[i,]
df[get(x$s2) > 0 ,dummy_si := x$b0 + ( x$b1* get(x$s2))]
print(df$dummy_si)
}
df
df
df$se < 0
df
df$se <- 0
df
for (i in 1:nrow(cx)){
x <- cx[i,]
df[get(x$s2) > 0 ,dummy_si := x$b0 + ( x$b1* get(x$s2))]
print(df$dummy_si)
}
head(coef)
df
cx
x$s2
i <- 1
x <- cx[i,]
x
x$s2
df[get(x$s2)]
df[get(x$s2),]
df[,get(x$s2)]
df
df[get(x$s2) > 0 ,dummy_si := x$b0 + ( x$b1* get(x$s2))]
df
x$s2
x$b1
x$b0
1.25*20.1
25.125 - 4.76
df[sw >0,]
get(x$s2)
coef <- data.table::fread(fnc,sep=',')
sp
cx <- coef[coef$s1 == sp,]
cx
update_site_index <- function(df,sp) {
# df is the data table
# sp is the species to be converted
setDT(df)
# dummy column for updating single species site index
# we are passing by column reference
df$dummy_si <- 0
# subset for only the species in question
cx <- coef[coef$s1 == sp,]
# sort for cw, fd, hw
#if (df$bec_zone %in% c('CDF','CWH','MH') & sp %in% c('cw','fd','hw')){
#    cx <- cx %>% subset(l0 =='c')
#} else {
#      cx <- cx %>% subset(l0 == '')
#    }
#  loop over the set of coefficients that are available for the species that has a 0 site index
for (i in 1:nrow(cx)){
x <- cx[i,]
df[get(x$s2) > 0 ,dummy_si := x$b0 + ( x$b1* get(x$s2))]
}
# pass back the site index values
return(df$dummy_si)
}
df
rm(df)
si_data
x1 <- fix_si[fix_si$id == 1,]
x1
x1$at[which(x1$at==0)] <- update_site_index(x1[which(x1$at==0)],'at')
x1
coef
df <- x1
class(df)
sp <- 'at'
cx <- coef[coef$s1 == sp,]
cx
for (i in 1:nrow(cx)){
x <- cx[i,]
df[get(x$s2) > 0 ,dummy_si := x$b0 + ( x$b1* get(x$s2))]
}
df
df
df$pl <- 0
df
df$dummy_si <- 0
for (i in 1:nrow(cx)){
x <- cx[i,]
df[get(x$s2) > 0 ,dummy_si := x$b0 + ( x$b1* get(x$s2))]
}
df
df
df <- rbind(df,df)
df$id[2,] <- 2
df$id[2, ] <- 2
df
View(df)
df[1,]
df[2,]
df$id[df[2,]] <- 2
df$id <- c(1,2)
df
df$pl[df$id==1] <- 1
df$pl[df$id==2] <- 0
df
df$sw[df$id==1] <- 0
df
df$sw[df$id==2] <- 1
df
cx
for (i in 1:nrow(cx)){
x <- cx[i,]
df[get(x$s2) > 0 ,dummy_si := x$b0 + ( x$b1* get(x$s2))]
}
df
df
df$at <- 0
df
update_site_index <- function(df,sp) {
# df is the data table
# sp is the species to be converted
setDT(df)
# dummy column for updating single species site index
# we are passing by column reference
df$dummy_si <- 0
# subset for only the species in question
cx <- coef[coef$s1 == sp,]
# sort for cw, fd, hw
#if (df$bec_zone %in% c('CDF','CWH','MH') & sp %in% c('cw','fd','hw')){
#    cx <- cx %>% subset(l0 =='c')
#} else {
#      cx <- cx %>% subset(l0 == '')
#    }
#  loop over the set of coefficients that are available for the species that has a 0 site index
for (i in 1:nrow(cx)){
x <- cx[i,]
df[get(x$s2) > 0 ,dummy_si := x$b0 + ( x$b1* get(x$s2))]
}
# pass back the site index values
return(df$dummy_si)
}
x1 <- df
x1
x1$at[which(x1$at==0)] <- update_site_index(x1[which(x1$at==0)],'at')
x1
x1 <- rbind(x1,x1)
x1$id <- c(1,2,3,4)
x1
x1 <- x1 %>% subset(id < 4)
x1
x1$sw[x1$is==3] <- 1
x1
x1$sw[x1$id==3] <- 1
x1
x1$at[which(x1$at==0)] <- update_site_index(x1[which(x1$at==0)],'at')
x1
x1$at <- 0
x1$at[which(x1$at==0)] <- update_site_index(x1[which(x1$at==0)],'at')
x1
x1
x1$at <- 0
x1<- update_site_index(x1,'at')
x1
x1$at<- update_site_index(x1,'at')
x1 <- fix_si[fix_si$id == 1,]
x1 <- rbind(x1,x1,x1)
x1
x1$pl[x1$is %in% c(1,3)] <- 1
x1$sw[x1$is %in% c(2,3)] <- 1
x1
x1 <- fix_si[fix_si$id == 1,]
x1 <- rbind(x1,x1,x1)
x1$pl <- 0
x1$sw <- 0
x1$pl[x1$is %in% c(1,3)] <- 1
x1$sw[x1$is %in% c(2,3)] <- 1
x1
x1$at <- 0
x1 <- fix_si[fix_si$id == 1,]
x1 <- rbind(x1,x1,x1)
x1$at <- 0
x1$pl <- 0
x1$sw <- 0
x1$pl[x1$id %in% c(1,3)] <- 1
x1$sw[x1$id %in% c(2,3)] <- 1
x1
x1 <- fix_si[fix_si$id == 1,]
x1 <- rbind(x1,x1,x1)
x1$at <- 0
x1$pl <- 0
x1$sw <- 0
x1$id <- c(1,2,3)
x1$pl[x1$id %in% c(1,3)] <- 1
x1$sw[x1$id %in% c(2,3)] <- 1
x1
x1$at<- update_site_index(x1,'at')
x1
update_site_index <- function(df,sp) {
# df is the data table
# sp is the species to be converted
setDT(df)
# dummy column for updating single species site index
# we are passing by column reference
df$dummy_si <- 0
# subset for only the species in question
cx <- coef[coef$s1 == sp,]
# sort for cw, fd, hw
#if (df$bec_zone %in% c('CDF','CWH','MH') & sp %in% c('cw','fd','hw')){
#    cx <- cx %>% subset(l0 =='c')
#} else {
#      cx <- cx %>% subset(l0 == '')
#    }
#  loop over the set of coefficients that are available for the species that has a 0 site index
for (i in 1:nrow(cx)){
x <- cx[i,]
df[get(x$s2) > 0 & dummy_si == 0 ,dummy_si := x$b0 + ( x$b1* get(x$s2))]
}
# pass back the site index values
return(df$dummy_si)
}
x1$at <- 0
x1
x1$at<- update_site_index(x1,'at')
x1
fn <- paste0(getwd(),'/test_si_data.csv')
fn2 <- paste0(getwd(),'/test_species_data.csv')
# read 2022 data (unconverted)
si_data <- data.table::fread(fn,sep=',')
fid <- si_data$feature_id
#q1 <- glue::glue_sql("select feature_id,array_to_string(species,',') as species ,bec_zone,bec_subzone from species_list_future_fid where feature_id in ({fid*})")
#species <- dbGetQuery(con,q1)
species <- data.table::fread(fn2,sep=',')
si_data <- left_join(si_data,species,by='feature_id')
# all si values NA need to be zero
si_data[is.na(si_data)] <- 0
si_data$bec_zone <- 'ESSF'
si_data$bec_subzone <- 'mk'
si_data$bec_zone[si_data$id> 20] <- 'CDF'
names(si_data) <- c("id","feature_id","at","ba","bg","bl","cw","dr","ep","fd","hm","hw","lt","lw","pa","pl","pw","py","sb","se","ss" ,"sw","sx","yc","species","bec_zone" ,"bec_subzone")
si_data <- assign_missing(si_data)
si_data$src <- 'pspl'
# split
# those that require fixing
fix_si <- si_data %>% subset(missing != '')
# those that are good
si_data <- si_data %>% subset(!missing != '')
# those that require fixing
fix_si <- si_data %>% subset(missing != '')
fix_si
fn <- paste0(getwd(),'/test_si_data.csv')
fn2 <- paste0(getwd(),'/test_species_data.csv')
# read 2022 data (unconverted)
si_data <- data.table::fread(fn,sep=',')
fid <- si_data$feature_id
#q1 <- glue::glue_sql("select feature_id,array_to_string(species,',') as species ,bec_zone,bec_subzone from species_list_future_fid where feature_id in ({fid*})")
#species <- dbGetQuery(con,q1)
species <- data.table::fread(fn2,sep=',')
si_data <- left_join(si_data,species,by='feature_id')
# all si values NA need to be zero
si_data[is.na(si_data)] <- 0
si_data$bec_zone <- 'ESSF'
si_data$bec_subzone <- 'mk'
si_data$bec_zone[si_data$id> 20] <- 'CDF'
names(si_data) <- c("id","feature_id","at","ba","bg","bl","cw","dr","ep","fd","hm","hw","lt","lw","pa","pl","pw","py","sb","se","ss" ,"sw","sx","yc","species","bec_zone" ,"bec_subzone")
si_data <- assign_missing(si_data)
si_data$src <- 'pspl'
# split
# those that require fixing
fix_si <- si_data %>% subset(missing != '')
# those that are good
si_data <- si_data %>% subset(!missing != '')
fix_si
fix_si$src <- 'spruce_conv'
fix_si$sw[which(fix_si$sw==0) ] <- update_site_index_1_1(fix_si[which(fix_si$sw==0 )],'sw')
fix_si$se[which(fix_si$se==0) ] <- update_site_index_1_1(fix_si[which(fix_si$se==0 )],'se')
#fix_si <- spruce_conversion(fix_si)
fix_si <- assign_missing(fix_si)
# put those that are fixed back into base
si_data <- rbind(si_data,fix_si[fix_si$missing=='',])
# those that require fixing
fix_si <- fix_si %>% subset(missing != '')
fix_si$src <- 'base1'
fix_si
fix_si$at[which(fix_si$at==0)] <- update_site_index(fix_si[which(fix_si$at==0)],'at')
fix_si
coef <- data.table::fread(fnc,sep=',')
coef
fn <- paste0(getwd(),'/test_si_data.csv')
fn2 <- paste0(getwd(),'/test_species_data.csv')
# read 2022 data (unconverted)
si_data <- data.table::fread(fn,sep=',')
fid <- si_data$feature_id
#q1 <- glue::glue_sql("select feature_id,array_to_string(species,',') as species ,bec_zone,bec_subzone from species_list_future_fid where feature_id in ({fid*})")
#species <- dbGetQuery(con,q1)
species <- data.table::fread(fn2,sep=',')
si_data <- left_join(si_data,species,by='feature_id')
# all si values NA need to be zero
si_data[is.na(si_data)] <- 0
si_data$bec_zone <- 'ESSF'
si_data$bec_subzone <- 'mk'
si_data$bec_zone[si_data$id> 20] <- 'CDF'
names(si_data) <- c("id","feature_id","at","ba","bg","bl","cw","dr","ep","fd","hm","hw","lt","lw","pa","pl","pw","py","sb","se","ss" ,"sw","sx","yc","species","bec_zone" ,"bec_subzone")
si_data <- assign_missing(si_data)
si_data$src <- 'pspl'
# split
# those that require fixing
fix_si <- si_data %>% subset(missing != '')
# those that are good
si_data <- si_data %>% subset(!missing != '')
fix_si$src <- 'spruce_conv'
fix_si$sw[which(fix_si$sw==0) ] <- update_site_index_1_1(fix_si[which(fix_si$sw==0 )],'sw')
fix_si$se[which(fix_si$se==0) ] <- update_site_index_1_1(fix_si[which(fix_si$se==0 )],'se')
#fix_si <- spruce_conversion(fix_si)
fix_si <- assign_missing(fix_si)
# put those that are fixed back into base
si_data <- rbind(si_data,fix_si[fix_si$missing=='',])
# those that require fixing
fix_si <- fix_si %>% subset(missing != '')
fix_si$src <- 'base1'
fix_si$at[which(fix_si$at==0)] <- update_site_index(fix_si[which(fix_si$at==0)],'at')
fix_si
fix_si
fix_si$at <- 0
fix_si$at[which(fix_si$at==0& grepl('At',dt$missing) )] <- update_site_index(fix_si[which(fix_si$at==0 & grepl('At',dt$missing))],'at')
fix_si$at[which(fix_si$at==0 & grepl('At',fix_si$missing) )] <- update_site_index(fix_si[which(fix_si$at==0 & grepl('At',fix_si$missing))],'at')
fn <- paste0(getwd(),'/test_si_data.csv')
fn2 <- paste0(getwd(),'/test_species_data.csv')
# read 2022 data (unconverted)
si_data <- data.table::fread(fn,sep=',')
fid <- si_data$feature_id
#q1 <- glue::glue_sql("select feature_id,array_to_string(species,',') as species ,bec_zone,bec_subzone from species_list_future_fid where feature_id in ({fid*})")
#species <- dbGetQuery(con,q1)
species <- data.table::fread(fn2,sep=',')
si_data <- left_join(si_data,species,by='feature_id')
# all si values NA need to be zero
si_data[is.na(si_data)] <- 0
si_data$bec_zone <- 'ESSF'
si_data$bec_subzone <- 'mk'
si_data$bec_zone[si_data$id> 20] <- 'CDF'
names(si_data) <- c("id","feature_id","at","ba","bg","bl","cw","dr","ep","fd","hm","hw","lt","lw","pa","pl","pw","py","sb","se","ss" ,"sw","sx","yc","species","bec_zone" ,"bec_subzone")
si_data <- assign_missing(si_data)
si_data$src <- 'pspl'
# split
# those that require fixing
fix_si <- si_data %>% subset(missing != '')
# those that are good
si_data <- si_data %>% subset(!missing != '')
fix_si$src <- 'spruce_conv'
fix_si$sw[which(fix_si$sw==0) ] <- update_site_index_1_1(fix_si[which(fix_si$sw==0 )],'sw')
fix_si$se[which(fix_si$se==0) ] <- update_site_index_1_1(fix_si[which(fix_si$se==0 )],'se')
#fix_si <- spruce_conversion(fix_si)
fix_si <- assign_missing(fix_si)
# put those that are fixed back into base
si_data <- rbind(si_data,fix_si[fix_si$missing=='',])
# those that require fixing
fix_si <- fix_si %>% subset(missing != '')
fix_si$src <- 'base1'
fn <- paste0(getwd(),'/test_si_data.csv')
fn2 <- paste0(getwd(),'/test_species_data.csv')
# read 2022 data (unconverted)
si_data <- data.table::fread(fn,sep=',')
fid <- si_data$feature_id
#q1 <- glue::glue_sql("select feature_id,array_to_string(species,',') as species ,bec_zone,bec_subzone from species_list_future_fid where feature_id in ({fid*})")
#species <- dbGetQuery(con,q1)
species <- data.table::fread(fn2,sep=',')
si_data <- left_join(si_data,species,by='feature_id')
# all si values NA need to be zero
si_data[is.na(si_data)] <- 0
si_data$bec_zone <- 'ESSF'
si_data$bec_subzone <- 'mk'
si_data$bec_zone[si_data$id> 20] <- 'CDF'
names(si_data) <- c("id","feature_id","at","ba","bg","bl","cw","dr","ep","fd","hm","hw","lt","lw","pa","pl","pw","py","sb","se","ss" ,"sw","sx","yc","species","bec_zone" ,"bec_subzone")
si_data <- assign_missing(si_data)
si_data$src <- 'pspl'
# split
# those that require fixing
fix_si <- si_data %>% subset(missing != '')
# those that are good
si_data <- si_data %>% subset(!missing != '')
fix_si$src <- 'spruce_conv'
fix_si$sw[which(fix_si$sw==0) ] <- update_site_index_1_1(fix_si[which(fix_si$sw==0 )],'sw')
fix_si$se[which(fix_si$se==0) ] <- update_site_index_1_1(fix_si[which(fix_si$se==0 )],'se')
#fix_si <- spruce_conversion(fix_si)
fix_si <- assign_missing(fix_si)
# put those that are fixed back into base
si_data <- rbind(si_data,fix_si[fix_si$missing=='',])
# those that require fixing
fix_si <- fix_si %>% subset(missing != '')
fix_si$src <- 'base1'
fix_si$at[which(fix_si$at==0 & grepl('At',fix_si$missing) )] <- update_site_index(fix_si[which(fix_si$at==0 & grepl('At',fix_si$missing))],'at')
fix_si
fix_si$ba[which(fix_si$ba==0 & grepl('Ba',fix_si$missing) )] <- update_site_index(fix_si[which(fix_si$ba==0) & grepl('Ba',fix_si$missing) ],'ba')
fix_si
fix_si$bl[which(fix_si$bl==0  & grepl('Bl',fix_si$missing) )] <- update_site_index(fix_si[which(fix_si$bl==0  & grepl('Bl',fix_si$missing) )],'bl')
fix_si
fix_si$cw[which(fix_si$cw==0 & !fix_si$bec_zone %in% c('CDF','CWH','MH')  & grepl('Ce',fix_si$missing) )] <- update_site_index(fix_si[which(fix_si$cw==0 & !fix_si$bec_zone %in% c('CDF','CWH','MH')  & grepl('Cw',fix_si$missing) )],'cw')
fix_si
fix_si$cw[which(fix_si$cw==0 & !fix_si$bec_zone %in% c('CDF','CWH','MH')  & grepl('Cw',fix_si$missing) )] <- update_site_index(fix_si[which(fix_si$cw==0 & !fix_si$bec_zone %in% c('CDF','CWH','MH')  & grepl('Cw',fix_si$missing) )],'cw')
fix_si
fix_si$cw[which(fix_si$cw==0 & fix_si$bec_zone %in% c('CDF','CWH','MH')  & grepl('Cw',fix_si$missing) )] <- update_site_index(fix_si[which(fix_si$cw==0 & fix_si$bec_zone %in% c('CDF','CWH','MH')  & grepl('Cw',fix_si$missing) )],'cwc')
fix_si$fd[which(fix_si$fd==0 & !fix_si$bec_zone %in% c('CDF','CWH','MH')  & grepl('Fd',fix_si$missing) )] <- update_site_index(fix_si[which(fix_si$fd==0 & !fix_si$bec_zone %in% c('CDF','CWH','MH')  & grepl('Fd',fix_si$missing) )],'fd')
fix_si
fix_si$fd[which(fix_si$fd==0 & fix_si$bec_zone %in% c('CDF','CWH','MH')  & grepl('Fd',fix_si$missing) )] <- update_site_index(fix_si[which(fix_si$fd==0 & fix_si$bec_zone %in% c('CDF','CWH','MH')  & grepl('Fd',fix_si$missing) )],'fdc')
fix_si$fd[which(fix_si$fd==0 & fix_si$bec_zone %in% c('CDF','CWH','MH')  & grepl('Fd',fix_si$missing) )] <- update_site_index(fix_si[which(fix_si$fd==0 & fix_si$bec_zone %in% c('CDF','CWH','MH')  & grepl('Fd',fix_si$missing) )],'fdc')
fix_si$hw[which(fix_si$hw==0 & !fix_si$bec_zone %in% c('CDF','CWH','MH')  & grepl('Hw',fix_si$missing) )] <- update_site_index(fix_si[which(fix_si$hw==0 & !fix_si$bec_zone %in% c('CDF','CWH','MH')  & grepl('Hw',fix_si$missing) )],'hw')
fix_si$hw[which(fix_si$hw==0 & fix_si$bec_zone %in% c('CDF','CWH','MH')  & grepl('Hw',fix_si$missing) )] <- update_site_index(fix_si[which(fix_si$hw==0 & fix_si$bec_zone %in% c('CDF','CWH','MH')  & grepl('Hw',fix_si$missing) )],'hwc')
fix_si$lw[which(fix_si$lw==0  & grepl('Lw',fix_si$missing) )] <- update_site_index(fix_si[which(fix_si$lw==0  & grepl('Lw',fix_si$missing) )],'lw')
fix_si
fix_si$pl[which(fix_si$pl==0  & grepl('Pl',fix_si$missing) )] <- update_site_index(fix_si[which(fix_si$pl==0  & grepl('Pl',fix_si$missing) )],'pl')
fix_si
fix_si$sb[which(fix_si$sb==0  & grepl('Sb',fix_si$missing) )] <- update_site_index(fix_si[which(fix_si$sb==0  & grepl('Sb',fix_si$missing) )],'sb')
fix_si$ss[which(fix_si$ss==0  & grepl('Ss',fix_si$missing) )] <- update_site_index(fix_si[which(fix_si$ss==0  & grepl('Ss',fix_si$missing) )],'ss')
fix_si$sw[which(fix_si$sw==0  & grepl('Sw',fix_si$missing) )] <- update_site_index(fix_si[which(fix_si$sw==0  & grepl('Sw',fix_si$missing) )],'sw')
fix_si <- assign_missing(fix_si)
fix_si
# universal update for sw = sx & ss = sx
# does a one to one translation
# coded in the coefficient table as s1 = sz
fn <- paste0(getwd(),'/test_si_data.csv')
fn2 <- paste0(getwd(),'/test_species_data.csv')
# read 2022 data (unconverted)
si_data <- data.table::fread(fn,sep=',')
fid <- si_data$feature_id
#q1 <- glue::glue_sql("select feature_id,array_to_string(species,',') as species ,bec_zone,bec_subzone from species_list_future_fid where feature_id in ({fid*})")
#species <- dbGetQuery(con,q1)
species <- data.table::fread(fn2,sep=',')
si_data <- left_join(si_data,species,by='feature_id')
# all si values NA need to be zero
si_data[is.na(si_data)] <- 0
si_data$bec_zone <- 'ESSF'
si_data$bec_subzone <- 'mk'
si_data$bec_zone[si_data$id> 20] <- 'CDF'
names(si_data) <- c("id","feature_id","at","ba","bg","bl","cw","dr","ep","fd","hm","hw","lt","lw","pa","pl","pw","py","sb","se","ss" ,"sw","sx","yc","species","bec_zone" ,"bec_subzone")
si_data <- assign_missing(si_data)
si_data$src <- 'pspl'
# split
# those that require fixing
fix_si <- si_data %>% subset(missing != '')
# those that are good
si_data <- si_data %>% subset(!missing != '')
fix_si$src <- 'spruce_conv'
fix_si$sw[which(fix_si$sw==0) ] <- update_site_index_1_1(fix_si[which(fix_si$sw==0 )],'sw')
fix_si$se[which(fix_si$se==0) ] <- update_site_index_1_1(fix_si[which(fix_si$se==0 )],'se')
#fix_si <- spruce_conversion(fix_si)
fix_si <- assign_missing(fix_si)
# put those that are fixed back into base
si_data <- rbind(si_data,fix_si[fix_si$missing=='',])
# those that require fixing
fix_si <- fix_si %>% subset(missing != '')
fix_si$src <- 'base1'
#x1 <- fix_si[fix_si$id == 1,]
#x1 <- rbind(x1,x1,x1)
#x1$at <- 0
#x1$pl <- 0
#x1$sw <- 0
#x1$id <- c(1,2,3)
#x1$pl[x1$id %in% c(1,3)] <- 1
#x1$sw[x1$id %in% c(2,3)] <- 1
#
#x1$at<- update_site_index(x1,'at')
fix_si$at[which(fix_si$at==0 & grepl('At',fix_si$missing) )] <- update_site_index(fix_si[which(fix_si$at==0 & grepl('At',fix_si$missing))],'at')
fix_si$ba[which(fix_si$ba==0 & grepl('Ba',fix_si$missing) )] <- update_site_index(fix_si[which(fix_si$ba==0) & grepl('Ba',fix_si$missing) ],'ba')
# there are no coefficients for Bg
#fix_si$bg[which(fix_si$bg==0)] <- update_site_index(fix_si[which(fix_si$bg==0)],'bg')
# bl is assumed to be interior
fix_si$bl[which(fix_si$bl==0  & grepl('Bl',fix_si$missing) )] <- update_site_index(fix_si[which(fix_si$bl==0  & grepl('Bl',fix_si$missing) )],'bl')
# cw
fix_si$cw[which(fix_si$cw==0 & !fix_si$bec_zone %in% c('CDF','CWH','MH')  & grepl('Cw',fix_si$missing) )] <- update_site_index(fix_si[which(fix_si$cw==0 & !fix_si$bec_zone %in% c('CDF','CWH','MH')  & grepl('Cw',fix_si$missing) )],'cw')
fix_si$cw[which(fix_si$cw==0 & fix_si$bec_zone %in% c('CDF','CWH','MH')  & grepl('Cw',fix_si$missing) )] <- update_site_index(fix_si[which(fix_si$cw==0 & fix_si$bec_zone %in% c('CDF','CWH','MH')  & grepl('Cw',fix_si$missing) )],'cwc')
fix_si
x1 <- fix_si[fix_si$id == 1]
class(x1)
df <- x1
sp <- 'df'
cx <- coef[coef$s1 == sp,]
cx
coef
sp <- 'fd'
cx <- coef[coef$s1 == sp,]
cx
for (i in 1:nrow(cx)){
x <- cx[i,]
df[get(x$s2) > 0 & dummy_si == 0 ,dummy_si := x$b0 + ( x$b1* get(x$s2))]
}
df$dummy_si <- 0
for (i in 1:nrow(cx)){
x <- cx[i,]
df[get(x$s2) > 0 & dummy_si == 0 ,dummy_si := x$b0 + ( x$b1* get(x$s2))]
}
df
df
coef
coef[coef$s1=='lw',]
coef[coef$s1=='sb',]
x1
coef_1_1
