library(sf)
library(terra)
library(RPostgreSQL)
# set up for load to PostgreSQL
schema <- 'msyt_2022'
opt <- paste0("-c search_path=",schema)
user_name <- 'postgres'
database <- 'msyt'
con <- dbConnect('PostgreSQL',dbname=database,user=user_name,options=opt)
# read Provincial fid tif
fn1 <- paste0(substr(getwd(),1,1),':/data/data_projects/AR2022/PSPL/vri_raster.tif')
raster_fid <- rast(fn1)
# test file
f_name <- 'd:/data/data_projects/AR2022/gdb_data/test.shp'
f_name
point_set <- vect(f_name)
f_name <- 'd:/data/data_projects/AR2022/PSPL/gdb_data/test.shp'
point_set <- vect(f_name)
point_set
names(point_set) <- c("id_tag","at_si","ba_si","bg_si","bl_si","cw_si","dr_si","ep_si","fd_si","hm_si","hw_si","lt_si","lw_si","pa_si","pl_si","pw_si","py_si","sb_si","se_si","ss_si","sw_si","sx_si","yc_si","bapid","pem_spp","bgc_label","tsa_number")
library(tidyverse)
point_set <- point_set %>% select (-OBJECTID)
names(point_set) <- c("OBJECTID","id_tag","at_si","ba_si","bg_si","bl_si","cw_si","dr_si","ep_si","fd_si","hm_si","hw_si","lt_si","lw_si","pa_si","pl_si","pw_si","py_si","sb_si","se_si","ss_si","sw_si","sx_si","yc_si","bapid","pem_spp","bgc_label","tsa_number")
n_points <- nrow(point_set)
# add id to point data
point_set$pspl_id <- seq(1:nrow(p))
point_set$pspl_id <- seq(1:nrow(point_set))
e <- ext(point_set)
e[1] <- e[1] - 51
e[2] <- e[2] + 51
e[3] <- e[3] - 51
e[4] <- e[4] + 51
r
raster_fid
cropped_raster <- crop(raster_fid,e)
x <- extract(rc,point_set)
x <- extract(cropped_raster,point_set)
library(sf)
library(terra)
library(RPostgreSQL)
library(tidyverse)
# set up for load to PostgreSQL
schema <- 'msyt_2022'
opt <- paste0("-c search_path=",schema)
user_name <- 'postgres'
database <- 'msyt'
con <- dbConnect('PostgreSQL',dbname=database,user=user_name,options=opt)
# read Provincial fid tif
fn1 <- paste0(substr(getwd(),1,1),':/data/data_projects/AR2022/PSPL/vri_raster.tif')
raster_fid <- rast(fn1)
# test file
f_name <- 'd:/data/data_projects/AR2022/PSPL/gdb_data/test.shp'
r <- raster_fid
point_set <- vect(f_name)
names(point_set) <- c("OBJECTID","id_tag","at_si","ba_si","bg_si","bl_si","cw_si","dr_si","ep_si","fd_si","hm_si","hw_si","lt_si","lw_si","pa_si","pl_si","pw_si","py_si","sb_si","se_si","ss_si","sw_si","sx_si","yc_si","bapid","pem_spp","bgc_label","tsa_number")
n_points <- nrow(point_set)
point_set$pspl_id <- seq(1:nrow(point_set))
e <- ext(point_set)
e[1] <- e[1] - 51
e[2] <- e[2] + 51
e[3] <- e[3] - 51
e[4] <- e[4] + 51
rc <- crop(r,e)
rc
point_set
x <- extract(rc,point_set)
head(point_set)
x <- extract(rc,point_set,ID=FALSE)
names(point_set) <- c("id","id_tag","at_si","ba_si","bg_si","bl_si","cw_si","dr_si","ep_si","fd_si","hm_si","hw_si","lt_si","lw_si","pa_si","pl_si","pw_si","py_si","sb_si","se_si","ss_si","sw_si","sx_si","yc_si","bapid","pem_spp","bgc_label","tsa_number")
point_set <- vect(f_name)
names(point_set) <- c("id","id_tag","at_si","ba_si","bg_si","bl_si","cw_si","dr_si","ep_si","fd_si","hm_si","hw_si","lt_si","lw_si","pa_si","pl_si","pw_si","py_si","sb_si","se_si","ss_si","sw_si","sx_si","yc_si","bapid","pem_spp","bgc_label","tsa_number")
n_points <- nrow(point_set)
# add id to point data
point_set$pspl_id <- seq(1:nrow(point_set))
rc <- crop(r,e)
x <- extract(rc,point_set)
class(rc)
x <- terra::extract(rc,point_set)
p <- as.data.frame(p)
point_set <- as.data.frame(point_set)
x
point_set <- vect(f_name)
#test
#p <- vect(f1)
# lower case the names
names(point_set) <- c("id","id_tag","at_si","ba_si","bg_si","bl_si","cw_si","dr_si","ep_si","fd_si","hm_si","hw_si","lt_si","lw_si","pa_si","pl_si","pw_si","py_si","sb_si","se_si","ss_si","sw_si","sx_si","yc_si","bapid","pem_spp","bgc_label","tsa_number")
# number points i pspl
n_points <- nrow(point_set)
# add id to point data
point_set$id <- seq(1:nrow(point_set))
x <- terra::extract(rc,point_set)
# drop the geometry by changing to data frame
point_set <- as.data.frame(point_set)
point_set$feature_id <- x[,"feature_id"]
point_set
point_set
names(point_set)
point_set <- point_set %>% select(id,if_tag,bgc_label,feature_id)
point_set <- point_set %>% select(id,id_tag,bgc_label,feature_id)
point_set
nrow(x)
x
fn <- 'd:/data/data_projects/AR2022/PSPL/point_fid.csv'
data.table::fwrite(point_set,fn,sep=',')
library(sf)
library(terra)
library(RPostgreSQL)
library(tidyverse)
# set up for load to PostgreSQL
schema <- 'msyt_2022'
opt <- paste0("-c search_path=",schema)
user_name <- 'postgres'
database <- 'msyt'
con <- dbConnect('PostgreSQL',dbname=database,user=user_name,options=opt)
# read Provincial fid tif
fn1 <- paste0(substr(getwd(),1,1),':/data/data_projects/AR2022/PSPL/vri_raster.tif')
raster_fid <- rast(fn1)
# test file
shp_name <- 'd:/data/data_projects/AR2022/PSPL/gdb_data/test.shp'
point_set <- vect(shp_name)
names(point_set) <- c("id","id_tag","at_si","ba_si","bg_si","bl_si","cw_si","dr_si","ep_si","fd_si","hm_si","hw_si","lt_si","lw_si","pa_si","pl_si","pw_si","py_si","sb_si","se_si","ss_si","sw_si","sx_si","yc_si","bapid","pem_spp","bgc_label","tsa_number")
raster_fid
r <- raster_fid
n_points <- nrow(point_set)
# add id to point data
point_set$id <- seq(1:nrow(point_set))
e <- ext(point_set)
e[1] <- e[1] - 51
e[2] <- e[2] + 51
e[3] <- e[3] - 51
e[4] <- e[4] + 51
rc <- crop(r,e)
x <- terra::extract(rc,point_set)
point_set <- as.data.frame(point_set)
point_set$feature_id <- x[,"feature_id"]
head(point_set)
point_set[, 3:24] <- round(point_set[, 2:23], digits = 1)
point_set[, 3:24] <- round(point_set[, 3:24], digits = 1)
point_set$tab_no <- n
point_set$tab_no <- 1
fn3 <- paste0(substr(getwd(),1,1),':/Data/data_projects/AR2022/PSPL/csv',n,'.csv')
n
n <- 1
fn3 <- paste0(substr(getwd(),1,1),':/Data/data_projects/AR2022/PSPL/csv',n,'.csv')
data.table::fwrite(point_set,fn3,sep=',',append=FALSE)
library(RPostgreSQL)
year <- '2022'
dump_to_folder <- paste0(substr(getwd(),1,1),':/data/dataprojects/ar',year,'/PSPL/si_data/')
pg_dump_table <- function(t_name,folder){
# -O required to negate ownership
f_out <- paste0(folder,'msyt_',year,'_',t_name,'.sql')
tbl <- paste0('msyt_',year,'.',t_name)
q1 <- paste0("-d ",
database,
" -O",
" -t ",
tbl,
" -f ",
f_out )
#system2("pg_dump",args=q1,stderr=TRUE,wait=TRUE)
print(q1)
}
pg_dump_table(pspl_intersected,dump_to_folder)
pg_dump_table('pspl_intersected',dump_to_folder)
schema <- paste0('msyt_',year)
opt <- paste0("-c search_path=",schema)
user_name <- 'results'
database <- 'msyt'
pg_dump_table <- function(t_name,folder){
# -O required to negate ownership
f_out <- paste0(folder,'msyt_',year,'_',t_name,'.sql')
tbl <- paste0('msyt_',year,'.',t_name)
q1 <- paste0("-d ",
database,
" -O",
" -t ",
tbl,
" -f ",
f_out )
#system2("pg_dump",args=q1,stderr=TRUE,wait=TRUE)
print(q1)
}
pg_dump_table('pspl_intersected',dump_to_folder)
local_pspl_folder <- paste0(substr(getwd(),1,1),':/data/data_projects/AR2022/PSPL/gdb_data')
local_pspl_folder
f1 <- paste0(local_pspl_folder,'/Site_Prod_Cassiar.gdb')
f1
cat(dir_size()/10**6, "MB")
dir_size <- function(path, recursive = TRUE) {
stopifnot(is.character(path))
files <- list.files(path, full.names = T, recursive = recursive)
vect_size <- sapply(files, function(x) file.size(x))
size_files <- sum(vect_size)
size_files
}
cat(dir_size()/10**6, "MB")
cat(dir_size(f1)/10**6, "MB")
year <- '2022'
library(sf)
library(terra)
library(RPostgreSQL)
# set up for load to PostgreSQL
schema <- paste0('msyt_',year)
opt <- paste0("-c search_path=",schema)
user_name <- 'results'
database <- 'msyt'
con <- dbConnect('PostgreSQL',dbname=database,user=user_name,options=opt)
# read Provincial fid tif
fn1 <- paste0(substr(getwd(),1,1),':/data/data_projects/AR2022/PSPL/vri_raster.tif')
raster_fid <- rast(fn1)
# this is where the unzipped files are placed locally
local_pspl_folder <- paste0(substr(getwd(),1,1),':/data/data_projects/AR2022/PSPL/gdb_data')
# build list of the PSPL gdbs
# list of gdb files to process
f_list <- list.files(local_pspl_folder,full.names = TRUE)
num_gdb = length(f_list)  #number of files to process
f_list
raster_fid
r <- raster_fid
pf <- f_list[6]
n = 6
pf
t_name <- toold::file_path_sans_ext(pf)
t_name <- tools::file_path_sans_ext(pf)
t_name
basename(pf)
t_name <- tools::file_path_sans_ext(basename(pf))
t_name
sel_query <- paste0('select  at_si,ba_si,bg_si,bl_si,cw_si,dr_si,ep_si,fd_si,hm_si,hw_si,lt_si,lw_si,pa_si,pl_si,pw_si,py_si,sb_si,se_si,ss_si,sw_si,sx_si,yc_si from ',t_name,' where (at_si is not null or ba_si is not null or bg_si is not null or bl_si is not null or cw_si is not null or dr_si is not null or ep_si is not null or fd_si is not null or hm_si is not null or hw_si is not null or lt_si is not null or lw_si is not null or pa_si is not null or pl_si is not null or pw_si is not null or py_si is not null or sb_si is not null or se_si is not null or ss_si is not null or sw_si is not null or sx_si is not null or yc_si is not null)')
point_set <- vect(pf,query = sel_query )
head(point_set)
n_points <- nrow(point_set)
# add id to point data
point_set$pspl_id <- seq(1:nrow(point_set))
# define extent from p add 1 m all around
e <- ext(point_set)
e[1] <- e[1] - 51
e[2] <- e[2] + 51
e[3] <- e[3] - 51
e[4] <- e[4] + 51
# crop the raster using the extent
cropped_raster <- crop(r,e)
# extract the raster data at the x,y of the points
x <- extract(cropped_raster,point_set)
point_set <- as.data.frame(point_set)
head(point_set)
point_set$feature_id <- x[,"feature_id"]
point_set[, 1:22] <- round(point_set[, 1:22], digits = 1)
dbWriteTable(con,'pspl_intersected',point_set,row.names=FALSE,overwrite=TRUE)
pf
sel_query2 <- paste0('select  at_si,ba_si,bg_si,bl_si,cw_si,dr_si,ep_si,fd_si,hm_si,hw_si,lt_si,lw_si,pa_si,pl_si,pw_si,py_si,sb_si,se_si,ss_si,sw_si,sx_si,yc_si from ',t_name)
point_set <- vect(pf,query = sel_query2 )
# number points i pspl
n_points <- nrow(point_set)
# add id to point data
point_set$pspl_id <- seq(1:nrow(point_set))
#crop raster to point extent + 51
# define extent from p add 1 m all around
e <- ext(point_set)
e[1] <- e[1] - 51
e[2] <- e[2] + 51
e[3] <- e[3] - 51
e[4] <- e[4] + 51
# crop the raster using the extent
cropped_raster <- crop(r,e)
# extract the raster data at the x,y of the points
x <- extract(cropped_raster,point_set)
# drop the geometry by changing to data frame
point_set <- as.data.frame(point_set)
# join raster data feature_id
point_set$feature_id <- as.integer(x[,"feature_id"])
# set to 1 decimal place
# this matches the output from the Biophysical model
# note that this works for CSV
# export to PostgreSQL will keep as double
# unless field.types are specified
# but this has to be a named vector
# handle the conversion in SQL
point_set[, 1:22] <- round(point_set[, 1:22], digits = 1)
dbWriteTable(con,'pspl_intersected',point_set,row.names=FALSE,overwrite=TRUE)
nrow(point_set)
year <- '2022'
library(sf)
library(terra)
library(RPostgreSQL)
# set up for load to PostgreSQL
schema <- paste0('msyt_',year)
opt <- paste0("-c search_path=",schema)
user_name <- 'results'
database <- 'msyt'
con <- dbConnect('PostgreSQL',dbname=database,user=user_name,options=opt)
# read Provincial fid tif
fn1 <- paste0(substr(getwd(),1,1),':/data/data_projects/AR2022/PSPL/vri_raster.tif')
raster_fid <- rast(fn1)
# this is where the unzipped files are placed locally
local_pspl_folder <- paste0(substr(getwd(),1,1),':/data/data_projects/AR2022/PSPL/gdb_data')
# build list of the PSPL gdbs
# list of gdb files to process
f_list <- list.files(local_pspl_folder,full.names = TRUE)
num_gdb = length(f_list)  #number of files to process
r <- raster_fid
pf <- f_list[6]
n = 6
r
pf
t_name <- tools::file_path_sans_ext(basename(pf))
#sel_query1 <- paste0('select  at_si,ba_si,bg_si,bl_si,cw_si,dr_si,ep_si,fd_si,hm_si,hw_si,lt_si,lw_si,pa_si,pl_si,pw_si,py_si,sb_si,se_si,ss_si,sw_si,sx_si,yc_si from ',t_name,' where (at_si is not null or ba_si is not null or bg_si is not null or bl_si is not null or cw_si is not null or dr_si is not null or ep_si is not null or fd_si is not null or hm_si is not null or hw_si is not null or lt_si is not null or lw_si is not null or pa_si is not null or pl_si is not null or pw_si is not null or py_si is not null or sb_si is not null or se_si is not null or ss_si is not null or sw_si is not null or sx_si is not null or yc_si is not null)')
sel_query2 <- paste0('select  at_si,ba_si,bg_si,bl_si,cw_si,dr_si,ep_si,fd_si,hm_si,hw_si,lt_si,lw_si,pa_si,pl_si,pw_si,py_si,sb_si,se_si,ss_si,sw_si,sx_si,yc_si from ',t_name)
point_set <- vect(pf,query = sel_query2 )
nrow(point_set)
point_set <- vect(pf)
nrow(point_set)
pf
f_list
pf <- f_list[7]
n = 7
point_set <- vect(pf,query = sel_query2 )
t_name <- tools::file_path_sans_ext(basename(pf))
point_set <- vect(pf,query = sel_query2 )
#rast_intersect(raster_fid,fname,n)
r <- raster_fid
pf <- f_list[7]
n = 7
t_name <- tools::file_path_sans_ext(basename(pf))
#sel_query1 <- paste0('select  at_si,ba_si,bg_si,bl_si,cw_si,dr_si,ep_si,fd_si,hm_si,hw_si,lt_si,lw_si,pa_si,pl_si,pw_si,py_si,sb_si,se_si,ss_si,sw_si,sx_si,yc_si from ',t_name,' where (at_si is not null or ba_si is not null or bg_si is not null or bl_si is not null or cw_si is not null or dr_si is not null or ep_si is not null or fd_si is not null or hm_si is not null or hw_si is not null or lt_si is not null or lw_si is not null or pa_si is not null or pl_si is not null or pw_si is not null or py_si is not null or sb_si is not null or se_si is not null or ss_si is not null or sw_si is not null or sx_si is not null or yc_si is not null)')
sel_query2 <- paste0('select  at_si,ba_si,bg_si,bl_si,cw_si,dr_si,ep_si,fd_si,hm_si,hw_si,lt_si,lw_si,pa_si,pl_si,pw_si,py_si,sb_si,se_si,ss_si,sw_si,sx_si,yc_si from ',t_name)
pf
t_name
point_set <- vect(pf,query = sel_query2 )
nrow(point_set)
n_points <- nrow(point_set)
# add id to point data
point_set$pspl_id <- seq(1:nrow(point_set))
#crop raster to point extent + 51
# define extent from p add 1 m all around
e <- ext(point_set)
e[1] <- e[1] - 51
e[2] <- e[2] + 51
e[3] <- e[3] - 51
e[4] <- e[4] + 51
# crop the raster using the extent
cropped_raster <- crop(r,e)
# extract the raster data at the x,y of the points
x <- extract(cropped_raster,point_set)
# drop the geometry by changing to data frame
point_set <- as.data.frame(point_set)
point_set$feature_id <- as.integer(x[,"feature_id"])
point_set[, 1:22] <- round(point_set[, 1:22], digits = 1)
dbWriteTable(con,'pspl_intersected',point_set,row.names=FALSE,overwrite=TRUE)
head(point_set)
year <- '2022'
library(sf)
library(terra)
library(RPostgreSQL)
year <- '2022'
library(sf)
library(terra)
library(RPostgreSQL)
# set up for load to PostgreSQL
schema <- paste0('msyt_',year)
opt <- paste0("-c search_path=",schema)
user_name <- 'results'
database <- 'msyt'
con <- dbConnect('PostgreSQL',dbname=database,user=user_name,options=opt)
# read Provincial fid tif
fn1 <- paste0(substr(getwd(),1,1),':/data/data_projects/AR2022/PSPL/vri_raster.tif')
raster_fid <- rast(fn1)
# this is where the unzipped files are placed locally
local_pspl_folder <- paste0(substr(getwd(),1,1),':/data/data_projects/AR2022/PSPL/gdb_data')
# build list of the PSPL gdbs
# list of gdb files to process
f_list <- list.files(local_pspl_folder,full.names = TRUE)
num_gdb = length(f_list)  #number of files to process
f_list
pf <- f_list[6]
n = 6
t_name <- tools::file_path_sans_ext(basename(pf))
point_set <- vect(pf)
head(point_set)
pf
pf2 <- 'D:/data/data_projects/AR2022/PSPL/gdb_data/tst1.shp'
point_set <- vect(pf2)
pf2 <- 'D:/data/data_projects/AR2022/PSPL/gdb_data/test1.shp'
point_set <- vect(pf2)
head(pf2)
pf2
head(point_set)
point_set <- as.data.frame(point_set)
head(point_set)
pf
pf2
a <- sf::st_read(pf2)
head(a)
a <- vect(a)
head(a)
sel_query1 <- paste0('select  at_si,ba_si,bg_si,bl_si,cw_si,dr_si,ep_si,fd_si,hm_si,hw_si,lt_si,lw_si,pa_si,pl_si,pw_si,py_si,sb_si,se_si,ss_si,sw_si,sx_si,yc_si from ',t_name,' where (at_si is not null or ba_si is not null or bg_si is not null or bl_si is not null or cw_si is not null or dr_si is not null or ep_si is not null or fd_si is not null or hm_si is not null or hw_si is not null or lt_si is not null or lw_si is not null or pa_si is not null or pl_si is not null or pw_si is not null or py_si is not null or sb_si is not null or se_si is not null or ss_si is not null or sw_si is not null or sx_si is not null or yc_si is not null)')
pf
point_set <- vect(st::st_read(pf,query = sel_query2 ))
point_set <- vect(sf::st_read(pf,query = sel_query2 ))
point_set <- vect(sf::st_read(pf,query = sel_query1 ))
head(point_set)
pf <- f_list[7]
n = 7
t_name <- tools::file_path_sans_ext(basename(pf))
point_set <- vect(sf::st_read(pf,query = sel_query1 ))
pf
t_name
pf <- f_list[7]
n = 7
t_name <- tools::file_path_sans_ext(basename(pf))
sel_query1 <- paste0('select  at_si,ba_si,bg_si,bl_si,cw_si,dr_si,ep_si,fd_si,hm_si,hw_si,lt_si,lw_si,pa_si,pl_si,pw_si,py_si,sb_si,se_si,ss_si,sw_si,sx_si,yc_si from ',t_name,' where (at_si is not null or ba_si is not null or bg_si is not null or bl_si is not null or cw_si is not null or dr_si is not null or ep_si is not null or fd_si is not null or hm_si is not null or hw_si is not null or lt_si is not null or lw_si is not null or pa_si is not null or pl_si is not null or pw_si is not null or py_si is not null or sb_si is not null or se_si is not null or ss_si is not null or sw_si is not null or sx_si is not null or yc_si is not null)')
pf
point_set <- vect(sf::st_read(pf,query = sel_query1 ))
head(point_set)
nrow(point_set)
sel_query2 <- paste0('select at_si,ba_si,bg_si,bl_si,cw_si,dr_si,ep_si,fd_si,hm_si,hw_si,lt_si,lw_si,pa_si,pl_si,pw_si,py_si,sb_si,se_si,ss_si,sw_si,sx_si,yc_si from ',t_name,' where (at_si > 0 or ba_si > 0 or bg_si > 0 or bl_si > 0 or cw_si > 0 or dr_si > 0 or ep_si > 0 or fd_si > 0 or hm_si > 0 or hw_si > 0 or lt_si > 0 or lw_si > 0 or pa_si > 0 or pl_si > 0 or pw_si > 0 or py_si > 0 or sb_si > 0 or se_si > 0 or ss_si > 0 or sw_si > 0 or sx_si > 0 or yc_si > 0)')
rm(point_set)
gc()
point_set <- vect(pf,query = sel_query2)
nrow(point_set)
