c1
count(si_data,bec_zone)
rm(si_data)
fn <- paste0(getwd(),'/pspl_sample_data.csv')
# read 2022 data (unconverted)
si_data <- data.table::fread(fn,sep=',')
# all si values NA need to be zero
si_data[is.na(si_data)] <- 0
si_data$bec_zone <- 'ESSF'
si_data$bec_subzone <- 'mk'
#si_data$bec_zone[si_data$id> 20] <- 'CDF'
names(si_data) <- c("feature_id","at","ba","bg","bl","cw","dr","ep","fd","hm","hw","lt","lw","pa","pl","pw","py","sb","se","ss" ,"sw","sx","yc","species","bec_zone" ,"bec_subzone")
si_data <- assign_missing(si_data)
si_data$src <- 'pspl'
# split
# those that require fixing
fix_si <- si_data %>% subset(missing != '')
# those that are good
si_data <- si_data %>% subset(!missing != '')
fix_si$src <- 'spruce_conv'
fix_si$sw[which(fix_si$sw==0) ] <- update_site_index_1_1(fix_si[which(fix_si$sw==0 )],'sw')
fix_si$se[which(fix_si$se==0) ] <- update_site_index_1_1(fix_si[which(fix_si$se==0 )],'se')
fix_si$ss[which(fix_si$ss==0 & fix_si$bec_zone %in% c('CDF','CWH','MH'))] <- update_site_index_1_1(fix_si[which(fix_si$ss==0 & fix_si$bec_zone %in% c('CDF','CWH','MH'))],'ss')
#fix_si <- spruce_conversion(fix_si)
fix_si <- assign_missing(fix_si)
# put those that are fixed back into base
si_data <- rbind(si_data,fix_si[fix_si$missing=='',])
# those that require fixing
fix_si <- fix_si %>% subset(missing != '')
fix_si$src <- 'base1'
fix_si$at[which(fix_si$at==0 & grepl('At',fix_si$missing) )] <- update_site_index(fix_si[which(fix_si$at==0 & grepl('At',fix_si$missing))],'at')
fix_si$ba[which(fix_si$ba==0 & grepl('Ba',fix_si$missing) )] <- update_site_index(fix_si[which(fix_si$ba==0) & grepl('Ba',fix_si$missing) ],'ba')
# there are no coefficients for Bg
#fix_si$bg[which(fix_si$bg==0)] <- update_site_index(fix_si[which(fix_si$bg==0)],'bg')
# bl is assumed to be interior
fix_si$bl[which(fix_si$bl==0  & grepl('Bl',fix_si$missing) )] <- update_site_index(fix_si[which(fix_si$bl==0  & grepl('Bl',fix_si$missing) )],'bl')
# cw
fix_si$cw[which(fix_si$cw==0 & !fix_si$bec_zone %in% c('CDF','CWH','MH')  & grepl('Cw',fix_si$missing) )] <- update_site_index(fix_si[which(fix_si$cw==0 & !fix_si$bec_zone %in% c('CDF','CWH','MH')  & grepl('Cw',fix_si$missing) )],'cw')
fix_si$cw[which(fix_si$cw==0 & fix_si$bec_zone %in% c('CDF','CWH','MH')  & grepl('Cw',fix_si$missing) )] <- update_site_index(fix_si[which(fix_si$cw==0 & fix_si$bec_zone %in% c('CDF','CWH','MH')  & grepl('Cw',fix_si$missing) )],'cwc')
x1 <- fix_si[fix_si$id == 1]
x1$fd[which(x1$fd==0 & !x1$bec_zone %in% c('CDF','CWH','MH')  & grepl('Fd',x1$missing) )] <- update_site_index(x1[which(x1$fd==0 & !x1$bec_zone %in% c('CDF','CWH','MH')  & grepl('Fd',x1$missing) )],'fd')
#fd
fix_si$fd[which(fix_si$fd==0 & !fix_si$bec_zone %in% c('CDF','CWH','MH')  & grepl('Fd',fix_si$missing) )] <- update_site_index(fix_si[which(fix_si$fd==0 & !fix_si$bec_zone %in% c('CDF','CWH','MH')  & grepl('Fd',fix_si$missing) )],'fd')
fix_si$fd[which(fix_si$fd==0 & fix_si$bec_zone %in% c('CDF','CWH','MH')  & grepl('Fd',fix_si$missing) )] <- update_site_index(fix_si[which(fix_si$fd==0 & fix_si$bec_zone %in% c('CDF','CWH','MH')  & grepl('Fd',fix_si$missing) )],'fdc')
#hw
fix_si$hw[which(fix_si$hw==0 & !fix_si$bec_zone %in% c('CDF','CWH','MH')  & grepl('Hw',fix_si$missing) )] <- update_site_index(fix_si[which(fix_si$hw==0 & !fix_si$bec_zone %in% c('CDF','CWH','MH')  & grepl('Hw',fix_si$missing) )],'hw')
fix_si$hw[which(fix_si$hw==0 & fix_si$bec_zone %in% c('CDF','CWH','MH')  & grepl('Hw',fix_si$missing) )] <- update_site_index(fix_si[which(fix_si$hw==0 & fix_si$bec_zone %in% c('CDF','CWH','MH')  & grepl('Hw',fix_si$missing) )],'hwc')
fix_si$lw[which(fix_si$lw==0  & grepl('Lw',fix_si$missing) )] <- update_site_index(fix_si[which(fix_si$lw==0  & grepl('Lw',fix_si$missing) )],'lw')
fix_si$pl[which(fix_si$pl==0  & grepl('Pl',fix_si$missing) )] <- update_site_index(fix_si[which(fix_si$pl==0  & grepl('Pl',fix_si$missing) )],'pl')
fix_si$sb[which(fix_si$sb==0  & grepl('Sb',fix_si$missing) )] <- update_site_index(fix_si[which(fix_si$sb==0  & grepl('Sb',fix_si$missing) )],'sb')
fix_si$ss[which(fix_si$ss==0  & grepl('Ss',fix_si$missing) )] <- update_site_index(fix_si[which(fix_si$ss==0  & grepl('Ss',fix_si$missing) )],'ss')
fix_si$sw[which(fix_si$sw==0  & grepl('Sw',fix_si$missing) )] <- update_site_index(fix_si[which(fix_si$sw==0  & grepl('Sw',fix_si$missing) )],'sw')
# notes
# Sx off
fix_si <- assign_missing(fix_si)
si_data <- rbind(si_data,fix_si)
#convert to numeric 1
si_data <- si_data %>% mutate_if(is.numeric, round, digits=1)
tail(si_data)
library(tidyverse)
library(data.table)
kablep <- function (x) {
kable(x) %>%
kable_styling(bootstrap_options = c("striped"),full_width=F,font_size=13,position = 'left')
}
# get first set coefficients
fnc <- paste0(getwd(),'/conversion_coefficients_v1.txt')
coef <- data.table::fread(fnc,sep=',')
# get 1 to 1 coefficients
fnc2 <- paste0(getwd(),'/conversion_coefficients_1_1.txt')
coef_1_1 <- data.table::fread(fnc2,sep=',')
# function to derive where species do no have a site index
assign_missing <- function(d){
# force as data frame to be able to use column locaiton
setDT(d)
# set NA to 0
d[is.na(d)] <- 0
# convert 3 char species to 2 char
# Cwc,Fdc,Hwc
d$species <- gsub('Cwc','Cw',d$species)
d$species <- gsub('Cwi','Cw',d$species)
d$species <- gsub('Fdc','Fd',d$species)
d$species <- gsub('Fdi','Fd',d$species)
d$species <- gsub('Hwc','Hw',d$species)
d$species <- gsub('Hwi','Hw',d$species)
d$missing <- ''
d$missing <- case_when(
grepl('At',d$species) & d$at == 0 ~ 'At',
TRUE ~ ''
)
sp <- c('Ba','Bg','Bl','Cw','Dr','Ep','Fd','Hm','Hw','Lt','Lw','Pa','Pl','Pw','Py','Sb','Se','Ss','Sw','Yc')
# use the at_si column as reference
n <- which(colnames(d)=='at')
#n <- 3
for (s in sp) {
n <- n + 1
d$missing <- case_when(
grepl(s,d$species) & d[,..n] == 0 ~ paste0(d$missing,':',s),
TRUE ~ paste0(d$missing,'')
)
}
return(d)
}
# function to look up coefficients based on the species that has a zero for site index
# feed it the data table that is a subset of the species
# this looks up the column that holds the data
update_site_index <- function(df,sp) {
# df is the data table
# sp is the species to be converted
setDT(df)
# dummy column for updating single species site index
# we are passing by column reference
df$dummy_si <- 0
# subset for only the species in question
cx <- coef[coef$s1 == sp,]
# sort for cw, fd, hw
#if (df$bec_zone %in% c('CDF','CWH','MH') & sp %in% c('cw','fd','hw')){
#    cx <- cx %>% subset(l0 =='c')
#} else {
#      cx <- cx %>% subset(l0 == '')
#    }
#  loop over the set of coefficients that are available for the species that has a 0 site index
for (i in 1:nrow(cx)){
x <- cx[i,]
df[get(x$s2) > 0 & dummy_si == 0 ,dummy_si := x$b0 + ( x$b1* get(x$s2))]
}
# pass back the site index values
return(df$dummy_si)
}
# function to look up coefficients based on the species that has a zero for site index
# feed it the data table that is a subset of the species
# this looks up the column that holds the data
update_site_index_1_1 <- function(df,sp) {
setDT(df)
# dummy column for updating single species site index
# we are passing by column reference
df$dummy_si <- 0
# df is the data table
# sp is the species to be converted
# subset for only the species in question
cx <- coef_1_1[coef_1_1$s1 == sp,]
# loop over the set of coefficients that are available for the species that has a 0 site index
# grab the replacement data from the column name
for (i in 1:nrow(cx)){
x <- cx[i,]
#df[get(x$s2) > 0 & si == 0,si := get(x$s2)]
df[get(x$s2) > 0,dummy_si := get(x$s2)]
}
# pass back the site index values from the dummy column as a vector
return(df$dummy_si)
}
# universal update for sw = sx & ss = sx
# does a one to one translation
# coded in the coefficient table as s1 = sz
fn <- paste0(getwd(),'/pspl_sample_data.csv')
# read 2022 data (unconverted)
si_data <- data.table::fread(fn,sep=',')
# all si values NA need to be zero
si_data[is.na(si_data)] <- 0
si_data$bec_zone <- 'ESSF'
si_data$bec_subzone <- 'mk'
#si_data$bec_zone[si_data$id> 20] <- 'CDF'
names(si_data) <- c("feature_id","at","ba","bg","bl","cw","dr","ep","fd","hm","hw","lt","lw","pa","pl","pw","py","sb","se","ss" ,"sw","sx","yc","species","bec_zone" ,"bec_subzone")
si_data <- assign_missing(si_data)
si_data$src <- 'pspl'
# split
# those that require fixing
fix_si <- si_data %>% subset(missing != '')
# those that are good
si_data <- si_data %>% subset(!missing != '')
fix_si$src <- 'spruce_conv'
fix_si$sw[which(fix_si$sw==0) ] <- update_site_index_1_1(fix_si[which(fix_si$sw==0 )],'sw')
fix_si$se[which(fix_si$se==0) ] <- update_site_index_1_1(fix_si[which(fix_si$se==0 )],'se')
fix_si$ss[which(fix_si$ss==0 & fix_si$bec_zone %in% c('CDF','CWH','MH'))] <- update_site_index_1_1(fix_si[which(fix_si$ss==0 & fix_si$bec_zone %in% c('CDF','CWH','MH'))],'ss')
#fix_si <- spruce_conversion(fix_si)
fix_si <- assign_missing(fix_si)
# put those that are fixed back into base
si_data <- rbind(si_data,fix_si[fix_si$missing=='',])
# those that require fixing
fix_si <- fix_si %>% subset(missing != '')
fix_si$src <- 'base1'
fix_si$at[which(fix_si$at==0 & grepl('At',fix_si$missing) )] <- update_site_index(fix_si[which(fix_si$at==0 & grepl('At',fix_si$missing))],'at')
fix_si$ba[which(fix_si$ba==0 & grepl('Ba',fix_si$missing) )] <- update_site_index(fix_si[which(fix_si$ba==0) & grepl('Ba',fix_si$missing) ],'ba')
# there are no coefficients for Bg
#fix_si$bg[which(fix_si$bg==0)] <- update_site_index(fix_si[which(fix_si$bg==0)],'bg')
# bl is assumed to be interior
fix_si$bl[which(fix_si$bl==0  & grepl('Bl',fix_si$missing) )] <- update_site_index(fix_si[which(fix_si$bl==0  & grepl('Bl',fix_si$missing) )],'bl')
# cw
fix_si$cw[which(fix_si$cw==0 & !fix_si$bec_zone %in% c('CDF','CWH','MH')  & grepl('Cw',fix_si$missing) )] <- update_site_index(fix_si[which(fix_si$cw==0 & !fix_si$bec_zone %in% c('CDF','CWH','MH')  & grepl('Cw',fix_si$missing) )],'cw')
fix_si$cw[which(fix_si$cw==0 & fix_si$bec_zone %in% c('CDF','CWH','MH')  & grepl('Cw',fix_si$missing) )] <- update_site_index(fix_si[which(fix_si$cw==0 & fix_si$bec_zone %in% c('CDF','CWH','MH')  & grepl('Cw',fix_si$missing) )],'cwc')
x1 <- fix_si[fix_si$id == 1]
x1$fd[which(x1$fd==0 & !x1$bec_zone %in% c('CDF','CWH','MH')  & grepl('Fd',x1$missing) )] <- update_site_index(x1[which(x1$fd==0 & !x1$bec_zone %in% c('CDF','CWH','MH')  & grepl('Fd',x1$missing) )],'fd')
#fd
fix_si$fd[which(fix_si$fd==0 & !fix_si$bec_zone %in% c('CDF','CWH','MH')  & grepl('Fd',fix_si$missing) )] <- update_site_index(fix_si[which(fix_si$fd==0 & !fix_si$bec_zone %in% c('CDF','CWH','MH')  & grepl('Fd',fix_si$missing) )],'fd')
fix_si$fd[which(fix_si$fd==0 & fix_si$bec_zone %in% c('CDF','CWH','MH')  & grepl('Fd',fix_si$missing) )] <- update_site_index(fix_si[which(fix_si$fd==0 & fix_si$bec_zone %in% c('CDF','CWH','MH')  & grepl('Fd',fix_si$missing) )],'fdc')
#hw
fix_si$hw[which(fix_si$hw==0 & !fix_si$bec_zone %in% c('CDF','CWH','MH')  & grepl('Hw',fix_si$missing) )] <- update_site_index(fix_si[which(fix_si$hw==0 & !fix_si$bec_zone %in% c('CDF','CWH','MH')  & grepl('Hw',fix_si$missing) )],'hw')
fix_si$hw[which(fix_si$hw==0 & fix_si$bec_zone %in% c('CDF','CWH','MH')  & grepl('Hw',fix_si$missing) )] <- update_site_index(fix_si[which(fix_si$hw==0 & fix_si$bec_zone %in% c('CDF','CWH','MH')  & grepl('Hw',fix_si$missing) )],'hwc')
fix_si$lw[which(fix_si$lw==0  & grepl('Lw',fix_si$missing) )] <- update_site_index(fix_si[which(fix_si$lw==0  & grepl('Lw',fix_si$missing) )],'lw')
fix_si$pl[which(fix_si$pl==0  & grepl('Pl',fix_si$missing) )] <- update_site_index(fix_si[which(fix_si$pl==0  & grepl('Pl',fix_si$missing) )],'pl')
fix_si$sb[which(fix_si$sb==0  & grepl('Sb',fix_si$missing) )] <- update_site_index(fix_si[which(fix_si$sb==0  & grepl('Sb',fix_si$missing) )],'sb')
fix_si$ss[which(fix_si$ss==0  & grepl('Ss',fix_si$missing) )] <- update_site_index(fix_si[which(fix_si$ss==0  & grepl('Ss',fix_si$missing) )],'ss')
fix_si$sw[which(fix_si$sw==0  & grepl('Sw',fix_si$missing) )] <- update_site_index(fix_si[which(fix_si$sw==0  & grepl('Sw',fix_si$missing) )],'sw')
# notes
# Sx off
fix_si <- assign_missing(fix_si)
si_data <- rbind(si_data,fix_si)
#convert to numeric 1
si_data <- si_data %>% mutate_if(is.numeric, round, digits=1)
si_data <- si_data %>% select(feature_id,at,ba,bg,bl,cw,dr,ep,fd,hm,hw,lt,lw,pa,pl,pw,py,sb,se,ss,sw,sx,yc,src) %>% arrange(feature_id)
data.table::fwrite(si_data,'v2_t1.csv')
# universal update for sw = sx & ss = sx
# does a one to one translation
# coded in the coefficient table as s1 = sz
fn <- paste0(getwd(),'/pspl_sample_data.csv')
# read 2022 data (unconverted)
si_data <- data.table::fread(fn,sep=',')
# all si values NA need to be zero
si_data[is.na(si_data)] <- 0
si_data$bec_zone <- 'ESSF'
si_data$bec_subzone <- 'mk'
#si_data$bec_zone[si_data$id> 20] <- 'CDF'
names(si_data) <- c("feature_id","at","ba","bg","bl","cw","dr","ep","fd","hm","hw","lt","lw","pa","pl","pw","py","sb","se","ss" ,"sw","sx","yc","species","bec_zone" ,"bec_subzone")
si_data <- assign_missing(si_data)
si_data$src <- 'pspl'
# split
# those that require fixing
fix_si <- si_data %>% subset(missing != '')
# those that are good
si_data <- si_data %>% subset(!missing != '')
fix_si$src <- 'spruce_conv'
fix_si$sw[which(fix_si$sw==0) ] <- update_site_index_1_1(fix_si[which(fix_si$sw==0 )],'sw')
fix_si$se[which(fix_si$se==0) ] <- update_site_index_1_1(fix_si[which(fix_si$se==0 )],'se')
fix_si$ss[which(fix_si$ss==0 & fix_si$bec_zone %in% c('CDF','CWH','MH'))] <- update_site_index_1_1(fix_si[which(fix_si$ss==0 & fix_si$bec_zone %in% c('CDF','CWH','MH'))],'ss')
#fix_si <- spruce_conversion(fix_si)
fix_si <- assign_missing(fix_si)
colSums(fix_si[,1:23])
coef_1_1
year <- '2022'
library(RPostgreSQL)
library(tidyverse)
library(data.table)
library(ggplot2)
library(kableExtra)
# set up for schema and user
schema <- 'msyt_2022'
opt <- paste0("-c search_path=",schema)
user_name <- 'results'
database <- 'msyt'
con <- dbConnect('PostgreSQL',dbname='msyt',user=user_name,options=opt)
#load the R code for site index conversions
si_convert <- paste0(getwd(),'/site_index_conversion_equations_v3.r')
source(si_convert, local = knitr::knit_global())
kablep <- function (x) {
kable(x) %>%
kable_styling(bootstrap_options = c("striped"),full_width=F,font_size=13,position = 'left')
}
# function to derive where species do no have a site index
assign_missing <- function(d){
setDF(d)
# set NA to 0
d[is.na(d)] <- 0
# convert 3 char species to 2 char
# Cwc,Fdc,Hwc
d$species <- gsub('Cwc','Cw',d$species)
d$species <- gsub('Cwi','Cw',d$species)
d$species <- gsub('Fdc','Fd',d$species)
d$species <- gsub('Fdi','Fd',d$species)
d$species <- gsub('Hwc','Hw',d$species)
d$species <- gsub('Hwi','Hw',d$species)
d$missing <- ''
d$missing <- case_when(
grepl('At',d$species) & d$at_si == 0 ~ 'At',
TRUE ~ ''
)
sp <- c('Ba','Bg','Bl','Cw','Dr','Ep','Fd','Hm','Hw','Lt','Lw','Pa','Pl','Pw','Py','Sb','Se','Ss','Sw','Yc')
# use the at_si column as reference
n <- which(colnames(d)=='at_si')
#n <- 3
for (s in sp) {
n <- n + 1
d$missing <- case_when(
grepl(s,d$species) & d[,n] == 0 ~ paste0(d$missing,':',s),
TRUE ~ paste0(d$missing,'')
)
}
return(d)
}
# Sw, Se, Ss from Sx conversions based on BEC
#  assume that spruce is equal
spruce_conversion <- function(dt){
# cast to data.table
setDT(dt)
# ************************************
# Fix Sx: Sw, Se and Ss from Sx based on BEC
dt$sw_si <- case_when(
!dt$bec_zone %in% c('CDF','CWH','MH') & dt$bec_zone != 'ESSF' & dt$sx_si != 0 ~ dt$sx_si,
TRUE ~ dt$sw_si
)
dt$se_si <- case_when(
dt$bec_zone == 'ESSF' & dt$sx_si != 0 ~ dt$sx_si,
TRUE ~ dt$se_si
)
dt$ss_si <- case_when(
dt$bec_zone %in% c('CDF','CWH','MH') & dt$sx_si != 0 ~ dt$sx_si,
TRUE ~ dt$ss_si
)
#### Spruce  swap Se Sw Sx
# ********************************************************************
# Spruce   Se Sw Sx all interchange
# set sw = sx
dt$sw_si[which(dt$sw_si==0)] <- convert_sw_from_sx(dt[which(dt$sw_si==0)])
# set sw = se
dt$sw_si[which(dt$sw_si==0)] <- convert_sw_from_se(dt[which(dt$sw_si==0)])
# set se = sw
dt$se_si[which(dt$se_si==0)] <- convert_se_from_sw(dt[which(dt$se_si==0)])
# set ss = sx
dt$ss_si[which(dt$ss_si==0)] <- convert_ss_from_sx(dt[which(dt$ss_si==0)])
#### Spruce
# **************************************************************************
return(dt)
}
base_si_conversion <- function(dt) {
# cast to data.table
setDT(dt)
# At
dt$at_si[which(dt$at_si==0 & grepl('At',dt$missing))] <- convert_at_si(dt[which(dt$at_si==0 & grepl('At',dt$missing))])
# Ba
dt$ba_si[which(dt$ba_si==0 & grepl('Ba',dt$missing))] <- convert_ba_si(dt[which(dt$ba_si==0 & grepl('Ba',dt$missing))])
# Bl
dt$bl_si[which(dt$bl_si==0 & grepl('Bl',dt$missing))] <- convert_bl_si(dt[which(dt$bl_si==0 & grepl('Bl',dt$missing))])
# Cwc
dt$cw_si[which(dt$cw_si==0 & grepl('Cw',dt$missing))] <- convert_cw_si(dt[which(dt$cw_si==0 & grepl('Cw',dt$missing))])
# Fdc
dt$fd_si[which(dt$fd_si==0 & grepl('Fd',dt$missing) & dt$bec_zone %in% c('CDF','CWH','MH') )] <- convert_fdc_si(dt[which(dt$fd_si==0 & grepl('Fd',dt$missing) & dt$bec_zone %in% c('CDF','CWH','MH') )])
# Fdi
dt$fd_si[which(dt$fd_si==0 & grepl('Fd',dt$missing) & !dt$bec_zone %in% c('CDF','CWH','MH') )] <- convert_fdi_si(dt[which(dt$fd_si==0 & grepl('Fd',dt$missing) & !dt$bec_zone %in% c('CDF','CWH','MH') )])
# hw coast
dt$hw_si[which(dt$hw_si==0 & grepl('Hw',dt$missing) & dt$bec_zone %in% c('CDF','CWH','MH') )] <- convert_hwc_si(dt[which(dt$hw_si==0 & grepl('Hw',dt$missing) & dt$bec_zone %in% c('CDF','CWH','MH') )])
# hw interior
dt$hw_si[which(dt$hw_si==0 & grepl('Hw',dt$missing) & !dt$bec_zone %in% c('CDF','CWH','MH') )] <- convert_hwi_si(dt[which(dt$hw_si==0 & grepl('Hw',dt$missing) & !dt$bec_zone %in% c('CDF','CWH','MH') )])
# Lw
dt$lw_si[which(dt$lw_si==0 & grepl('Lw',dt$missing))] <- convert_lw_si(dt[which(dt$lw_si==0 & grepl('Lw',dt$missing))])
# Pl
dt$pl_si[which(dt$pl_si==0 & grepl('Pl',dt$missing))] <- convert_pl_si(dt[which(dt$pl_si==0 & grepl('Pl',dt$missing))])
# Sb
dt$sb_si[which(dt$sb_si==0 & grepl('Sb',dt$missing))] <- convert_sb_si(dt[which(dt$sb_si==0 & grepl('Sb',dt$missing))])
# Ss (coastal)
dt$ss_si[which(dt$ss_si==0 & grepl('Ss',dt$missing))] <- convert_ss_si(dt[which(dt$ss_si==0 & grepl('Ss',dt$missing))])
# Sw
dt$sw_si[which(dt$sw_si==0 & grepl('Sw',dt$missing))] <- convert_sw_si(dt[which(dt$sw_si==0 & grepl('Sw',dt$missing))])
# Pw
dt$pw_si[which(dt$pw_si==0 & grepl('Pw',dt$missing))] <- convert_pw(dt[which(dt$pw_si==0 & grepl('Pw',dt$missing))])
# Pa
dt$pa_si[which(dt$pa_si==0 & grepl('Pa',dt$missing))] <- convert_pa(dt[which(dt$pa_si==0 & grepl('Pa',dt$missing))])
# Py
dt$py_si[which(dt$py_si==0 & grepl('Py',dt$missing))] <- convert_py(dt[which(dt$py_si==0 & grepl('Py',dt$missing))])
# Dr Coast/Interior
dt$dr_si[which(dt$dr_si==0 & grepl('Dr',dt$missing))] <- convert_dr(dt[which(dt$dr_si==0 & grepl('Dr',dt$missing))])
# 1-1
# Bg 1-1
dt$bg_si[which(dt$bg_si==0 & grepl('Bg',dt$missing))] <- convert_bg(dt[which(dt$bg_si==0 & grepl('Bg',dt$missing))])
dt$bl_si[which(dt$bl_si==0 & grepl('Bl',dt$missing))] <- convert_bl(dt[which(dt$bl_si==0 & grepl('Bl',dt$missing))])
dt$ba_si[which(dt$ba_si==0 & grepl('Ba',dt$missing))] <- convert_ba(dt[which(dt$ba_si==0 & grepl('Ba',dt$missing))])
# Lw Lt
dt$lt_si[which(dt$lt_si==0 & grepl('Lt',dt$missing))] <- convert_lt_from_lw(dt[which(dt$lt_si==0 & grepl('Lt',dt$missing))])
# ********************************************************************
# Spruce   Se Sw Sx all interchange
# set sw = sx
#dt$sw_si[which(dt$sw_si==0)] <- convert_sw_from_sx(dt[which(dt$sw_si==0)])
# set sw = se
#dt$sw_si[which(dt$sw_si==0)] <- convert_sw_from_se(dt[which(dt$sw_si==0)])
# set se = sw
#dt$se_si[which(dt$se_si==0)] <- convert_se_from_sw(dt[which(dt$se_si==0)])
# set ss = sx
#dt$ss_si[which(dt$ss_si==0)] <- convert_ss_from_sx(dt[which(dt$ss_si==0)])
# can not do this because opening id can be negative
#dt[dt <0 ] <- 0.0
dt$at_si[dt$at_si < 0 ] <- 0.0
dt$ba_si[dt$ba_si < 0 ] <- 0.0
dt$bg_si[dt$bg_si < 0 ] <- 0.0
dt$bl_si[dt$bl_si < 0 ] <- 0.0
dt$cw_si[dt$cw_si < 0 ] <- 0.0
dt$dr_si[dt$dr_si < 0 ] <- 0.0
dt$ep_si[dt$ep_si < 0 ] <- 0.0
dt$fd_si[dt$fd_si < 0 ] <- 0.0
dt$hm_si[dt$hm_si < 0 ] <- 0.0
dt$hw_si[dt$hw_si < 0 ] <- 0.0
dt$lt_si[dt$lt_si < 0 ] <- 0.0
dt$lw_si[dt$lw_si < 0 ] <- 0.0
dt$pa_si[dt$pa_si < 0 ] <- 0.0
dt$pl_si[dt$pl_si < 0 ] <- 0.0
dt$pw_si[dt$pw_si < 0 ] <- 0.0
dt$py_si[dt$py_si < 0 ] <- 0.0
dt$sb_si[dt$sb_si < 0 ] <- 0.0
dt$se_si[dt$se_si < 0 ] <- 0.0
dt$ss_si[dt$ss_si < 0 ] <- 0.0
dt$sw_si[dt$sw_si < 0 ] <- 0.0
dt$sx_si[dt$sx_si < 0 ] <- 0.0
dt$yc_si[dt$yc_si < 0 ] <- 0.0
#convert to numeric 1
dt <- dt %>% mutate_if(is.numeric, round, digits=1)
return(dt)
}
bec_conversions <- function(inp){
setDT(inp)
inp[avg_BEC_data, on=c("bec_zone","bec_subzone"), at_si := ifelse(at_si==0, i.at_si,at_si)]
inp[avg_BEC_data, on=c("bec_zone","bec_subzone"), ba_si := ifelse(ba_si==0, i.ba_si,ba_si)]
inp[avg_BEC_data, on=c("bec_zone","bec_subzone"), bg_si := ifelse(bg_si==0, i.bg_si,bg_si)]
inp[avg_BEC_data, on=c("bec_zone","bec_subzone"), bl_si := ifelse(bl_si==0, i.bl_si,bl_si)]
inp[avg_BEC_data, on=c("bec_zone","bec_subzone"), cw_si := ifelse(cw_si==0, i.cw_si,cw_si)]
inp[avg_BEC_data, on=c("bec_zone","bec_subzone"), dr_si := ifelse(dr_si==0, i.dr_si,dr_si)]
inp[avg_BEC_data, on=c("bec_zone","bec_subzone"), ep_si := ifelse(ep_si==0, i.ep_si,ep_si)]
inp[avg_BEC_data, on=c("bec_zone","bec_subzone"), fd_si := ifelse(fd_si==0, i.fd_si,fd_si)]
inp[avg_BEC_data, on=c("bec_zone","bec_subzone"), hm_si := ifelse(hm_si==0, i.hm_si,hm_si)]
inp[avg_BEC_data, on=c("bec_zone","bec_subzone"), hw_si := ifelse(hw_si==0, i.hw_si,hw_si)]
inp[avg_BEC_data, on=c("bec_zone","bec_subzone"), lt_si := ifelse(lt_si==0, i.lt_si,lt_si)]
inp[avg_BEC_data, on=c("bec_zone","bec_subzone"), lw_si := ifelse(lw_si==0, i.lw_si,lw_si)]
inp[avg_BEC_data, on=c("bec_zone","bec_subzone"), pa_si := ifelse(pa_si==0, i.pa_si,pa_si)]
inp[avg_BEC_data, on=c("bec_zone","bec_subzone"), pl_si := ifelse(pl_si==0, i.pl_si,pl_si)]
inp[avg_BEC_data, on=c("bec_zone","bec_subzone"), pw_si := ifelse(pw_si==0, i.pw_si,pw_si)]
inp[avg_BEC_data, on=c("bec_zone","bec_subzone"), py_si := ifelse(py_si==0, i.py_si,py_si)]
inp[avg_BEC_data, on=c("bec_zone","bec_subzone"), sb_si := ifelse(sb_si==0, i.sb_si,sb_si)]
inp[avg_BEC_data, on=c("bec_zone","bec_subzone"), se_si := ifelse(se_si==0, i.se_si,se_si)]
inp[avg_BEC_data, on=c("bec_zone","bec_subzone"), ss_si := ifelse(ss_si==0, i.ss_si,ss_si)]
inp[avg_BEC_data, on=c("bec_zone","bec_subzone"), sw_si := ifelse(sw_si==0, i.sw_si,sw_si)]
inp[avg_BEC_data, on=c("bec_zone","bec_subzone"), sx_si := ifelse(sx_si==0, i.sx_si,sx_si)]
inp[avg_BEC_data, on=c("bec_zone","bec_subzone"), yc_si := ifelse(yc_si==0, i.yc_si,yc_si)]
return(inp)
}
fn <- paste0(getwd(),'/pspl_sample_data.csv')
si_data <- data.table::fread(fn,sep=',')
# get species list
fid <- si_data$feature_id
q1 <- glue::glue_sql("select feature_id,array_to_string(species,',') as species ,bec_zone,bec_subzone from species_list_future_fid where feature_id in ({fid*})")
species <- dbGetQuery(con,q1)
q1 <- glue::glue_sql("select feature_id,array_to_string(species,',') as species ,bec_zone,bec_subzone from species_list_future_fid where feature_id in ({fid*}) and bec_zone is not null")
species <- dbGetQuery(con,q1)
si_data <- left_join(si_data,species,by='feature_id')
nrow(si_data)
si_data <- dbGetQuery(con,'select * from pspl_site_index_mean_fid')
nrow(si-data)
nrow(si_data)
fid <- si_data$feature_id
q1 <- glue::glue_sql("select feature_id,array_to_string(species,',') as species ,bec_zone,bec_subzone from species_list_future_fid where feature_id in ({fid*}) and bec_zone is not null")
species <- dbGetQuery(con,q1)
nrow(species)
fid
q1 <- glue::glue_sql("select feature_id,array_to_string(species,',') as species ,bec_zone,bec_subzone from species_list_future_fid where feature_id in ({fid*})")
species <- dbGetQuery(con,'select feature_id, species from species_list_future_fid')
nrow(species)
nrow(si_data)
head(species)
class(species$species)
species <- dbGetQuery(con,'select feature_id, array_to_string(species,',') as species from species_list_future_fid')
species <- dbGetQuery(con,'select feature_id,array_to_string(species,',') as species ,bec_zone,bec_subzone from species_list_future_fid')
si_data
species <- dbGetQuery(con,'select feature_id,species ,bec_zone,bec_subzone from species_list_future_fid')
head(species)
class(species$species)
species$species <- gsub('{','',species$species)
species$species <- gsub('\{','',species$species)
species$species <- gsub('\\{','',species$species)
head(species)
species$species <- gsub('\\}','',species$species)
nrow(si_data)
si_data <- left_join(si_data,species,by='feature_id')
nrow(si_data)
# from PostgreSQL
si_data <- dbGetQuery(con,'select * from pspl_site_index_mean_fid')
# or from CSV
#fn <- paste0(getwd(),'/pspl_sample_data.csv')
#si_data <- data.table::fread(fn,sep=',')
# get species list
#fid <- si_data$feature_id
#q1 <- glue::glue_sql("select feature_id,array_to_string(species,',') as species ,bec_zone,bec_subzone from species_list_future_fid where feature_id in ({fid*})")
# species is an array in PostgreSQl
# comes across as "{At,Cwi,Fdi,Lw,Pl,Sw}" into R
species <- dbGetQuery(con,'select feature_id,species ,bec_zone,bec_subzone from species_list_future_fid')
# get rid of braces
species$species <- gsub('\\{','',species$species)
species$species <- gsub('\\}','',species$species)
species <- species %>% subset(feature_id %in% si_data$feature_id)
nrow(species)
nrow(si-data)
nrow(si_data)
si_data <- left_join(si_data,species,by='feature_id')
nrow(si_data)
# from PostgreSQL
si_data <- dbGetQuery(con,'select * from pspl_site_index_mean_fid')
# or from CSV
#fn <- paste0(getwd(),'/pspl_sample_data.csv')
#si_data <- data.table::fread(fn,sep=',')
# get species list
#fid <- si_data$feature_id
#q1 <- glue::glue_sql("select feature_id,array_to_string(species,',') as species ,bec_zone,bec_subzone from species_list_future_fid where feature_id in ({fid*})")
# species is an array in PostgreSQl
# comes across as "{At,Cwi,Fdi,Lw,Pl,Sw}" into R
species <- dbGetQuery(con,'select feature_id,species ,bec_zone,bec_subzone from species_list_future_fid')
# get rid of braces
species$species <- gsub('\\{','',species$species)
species$species <- gsub('\\}','',species$species)
species <- species %>% subset(feature_id %in% si_data$feature_id)
nrow(species)
nrow(unique(species))
nrow(species$feature_id)
nrow(unique(species$feature_id))
si_data <- si_data %>% subset(feature_id %in% species$feature_id)
nrow(species)
nrow(si_data)
si_data <- unique(si_data)
nrow(si_data)
