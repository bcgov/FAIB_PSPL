year <- '2022'
library(sf)
library(terra)
library(RPostgreSQL)
# set up for load to PostgreSQL
schema <- paste0('msyt_',year)
opt <- paste0("-c search_path=",schema)
user_name <- 'results'
database <- 'msyt'
con <- dbConnect('PostgreSQL',dbname=database,user=user_name,options=opt)
# read Provincial fid tif
fn1 <- paste0(substr(getwd(),1,1),':/data/data_projects/AR2022/PSPL/vri_raster.tif')
raster_fid <- rast(fn1)
# this is where the unzipped files are placed locally
local_pspl_folder <- paste0(substr(getwd(),1,1),':/data/data_projects/AR2022/PSPL/gdb_data')
# build list of the PSPL gdbs
# list of gdb files to process
f_list <- list.files(local_pspl_folder,full.names = TRUE)
num_gdb = length(f_list)  #number of files to process
r
raster_fid
r <- raster_fid
pf <- f_list[1]
n = 1
t_name <- tools::file_path_sans_ext(basename(pf))
point_set <- vect(sf::st_read(pf))
# define extent from p add 1 m all around
e <- ext(point_set)
e[1] <- e[1] - 51
e[2] <- e[2] + 51
e[3] <- e[3] - 51
e[4] <- e[4] + 51
# crop the raster using the extent
cropped_raster <- crop(r,e)
# extract the raster data at the x,y of the points
x <- extract(cropped_raster,point_set)
# drop the geometry by changing to data frame
point_set <- as.data.frame(point_set)
# join raster data feature_id
point_set$feature_id <- as.integer(x[,"feature_id"])
point_set[, 1:22] <- round(point_set[, 1:22], digits = 1)
head(point_set)
point_set
point_set[, 1:22] <- round(point_set[, 2:23], digits = 1)
n
point_set$unit_no <- n
dbWriteTable(con,'pspl_intersected2',point_set,row.names=FALSE,overwrite=TRUE)
#rast_intersect(raster_fid,fname,n)
r <- raster_fid
pf <- f_list[7]
n = 7
t_name <- tools::file_path_sans_ext(basename(pf))
# read the point file
#point_set <- vect(pf)
#point_set <- vect(pf,query = sel_query2)
# Note that terre vect(pf) treats NULL values as zero
# could possibly use si > 0 as query
point_set <- vect(sf::st_read(pf))
# define extent from p add 1 m all around
e <- ext(point_set)
e[1] <- e[1] - 51
e[2] <- e[2] + 51
e[3] <- e[3] - 51
e[4] <- e[4] + 51
# crop the raster using the extent
cropped_raster <- crop(r,e)
x <- extract(cropped_raster,point_set)
point_set <- as.data.frame(point_set)
point_set$feature_id <- as.integer(x[,"feature_id"])
point_set[, 1:22] <- round(point_set[, 2:23], digits = 1)
n
point_set$unit_no <- n
dbWriteTable(con,'pspl_intersected2',point_set,row.names=FALSE,overwrite=FALSE,append = TRUE)
point_set <- vect(pf)
# number points in pspl
n_points <- nrow(point_set)
# add id to point data
#point_set$pspl_id <- seq(1:nrow(point_set))
#crop raster to point extent + 51
# define extent from p add 1 m all around
e <- ext(point_set)
e[1] <- e[1] - 51
e[2] <- e[2] + 51
e[3] <- e[3] - 51
e[4] <- e[4] + 51
# crop the raster using the extent
cropped_raster <- crop(r,e)
# extract the raster data at the x,y of the points
x <- extract(cropped_raster,point_set)
# drop the geometry by changing to data frame
point_set <- as.data.frame(point_set)
rm(x)
gc()
rm(point_set)
gc()
q1 <- 'create table pspl_intersected as select feature_id, id_tag, at_si, ba_si, bg_si, bl_si, cw_si, dr_si, ep_si,fd_si, hm_si, hw_si, lt_si, lw_si, pa_si, pl_si, pw_si, py_si, sb_si, se_si, ss_si, sw_si, sx_si, yc_si,unit_no from pspl_intersected2'
dbExecute(con,q1)
year <- '2022'
library(sf)
library(terra)
library(RPostgreSQL)
# set up for load to PostgreSQL
schema <- paste0('msyt_',year)
opt <- paste0("-c search_path=",schema)
user_name <- 'results'
database <- 'msyt'
con <- dbConnect('PostgreSQL',dbname=database,user=user_name,options=opt)
q1 <- 'create table pspl_intersected as select feature_id, id_tag, at_si, ba_si, bg_si, bl_si, cw_si, dr_si, ep_si,fd_si, hm_si, hw_si, lt_si, lw_si, pa_si, pl_si, pw_si, py_si, sb_si, se_si, ss_si, sw_si, sx_si, yc_si,unit_no from pspl_intersected2'
dbExecute(con,q1)
q1 <- 'create table pspl_intersected as select  "ID_TAG","AT_SI","BA_SI","BG_SI","BL_SI","CW_SI","DR_SI","EP_SI","FD_SI","HM_SI","HW_SILT_SI","LW_SI","PA_SI","PL_SI","PW_SI","PY_SI","SB_SI","SE_SI","SS_SI","SW_SI","SX_SI","YC_SI","BAPID",unit_no from pspl_intersected2'
q1 <- 'create table pspl_intersected as select  "ID_TAG","AT_SI","BA_SI","BG_SI","BL_SI","CW_SI","DR_SI","EP_SI","FD_SI","HM_SI","HW_SILT_SI","LW_SI","PA_SI","PL_SI","PW_SI","PY_SI","SB_SI","SE_SI","SS_SI","SW_SI","SX_SI","YC_SI",unit_no from pspl_intersected2'
dbExecute(con,q1)
q1 <- 'create table pspl_intersected as select  "ID_TAG","AT_SI","BA_SI","BG_SI","BL_SI","CW_SI","DR_SI","EP_SI","FD_SI","HM_SI","HW_SI","LT_SI","LW_SI","PA_SI","PL_SI","PW_SI","PY_SI","SB_SI","SE_SI","SS_SI","SW_SI","SX_SI","YC_SI",unit_no from pspl_intersected2'
dbExecute(con,q1)
q1 <- 'delete from pspl_intersected where at_si=0 and ba_si=0 and bg_si=0 and bl_si=0 and cw_si=0 and dr_si=0 and ep_si=0 and fd_si=0 and hm_si=0 and hw_si=0 and lt_si is  null and lw_si=0 and pa_si=0 and pl_si=0 and pw_si=0 and py_si=0 and sb_si=0 and se_si=0 and ss_si=0 and sw_si=0 and sx_si=0 and yc_si=0'
dbExecute(con,q1)
year <- '2022'
library(sf)
library(terra)
library(RPostgreSQL)
# set up for load to PostgreSQL
schema <- paste0('msyt_',year)
opt <- paste0("-c search_path=",schema)
user_name <- 'results'
database <- 'msyt'
con <- dbConnect('PostgreSQL',dbname=database,user=user_name,options=opt)
# read Provincial fid tif
fn1 <- paste0(substr(getwd(),1,1),':/data/data_projects/AR2022/PSPL/vri_raster.tif')
raster_fid <- rast(fn1)
# this is where the unzipped files are placed locally
local_pspl_folder <- paste0(substr(getwd(),1,1),':/data/data_projects/AR2022/PSPL/gdb_data')
# build list of the PSPL gdbs
# list of gdb files to process
f_list <- list.files(local_pspl_folder,full.names = TRUE)
num_gdb = length(f_list)  #number of files to process
r <- raster_fid
pf <- f_list[1]
n = 1
t_name <- tools::file_path_sans_ext(basename(pf))
# read the point file
#point_set <- vect(pf)
#point_set <- vect(pf,query = sel_query2)
# Note that terre vect(pf) treats NULL values as zero
# could possibly use si > 0 as query
point_set <- vect(pf)
n_points <- nrow(point_set)
# define extent from p add 1 m all around
e <- ext(point_set)
e[1] <- e[1] - 51
e[2] <- e[2] + 51
e[3] <- e[3] - 51
e[4] <- e[4] + 51
# crop the raster using the extent
cropped_raster <- crop(r,e)
# extract the raster data at the x,y of the points
x <- extract(cropped_raster,point_set)
# drop the geometry by changing to data frame
point_set <- as.data.frame(point_set)
# join raster data feature_id
point_set$feature_id <- as.integer(x[,"feature_id"])
point_set[, 1:22] <- round(point_set[, 2:23], digits = 1)
point_set$unit_no <- n
head(point_set)
point_set[point_set == 0] <- NA
head(point_set)
# Note that terre vect(pf) treats NULL values as zero
# could possibly use si > 0 as query
point_set <- vect(pf)
#point_set <- vect(sf::st_read(pf))
# number points in pspl
n_points <- nrow(point_set)
# add id to point data
#point_set$pspl_id <- seq(1:nrow(point_set))
#crop raster to point extent + 51
# define extent from p add 1 m all around
e <- ext(point_set)
e[1] <- e[1] - 51
e[2] <- e[2] + 51
e[3] <- e[3] - 51
e[4] <- e[4] + 51
# crop the raster using the extent
cropped_raster <- crop(r,e)
# extract the raster data at the x,y of the points
x <- extract(cropped_raster,point_set)
# drop the geometry by changing to data frame
point_set <- as.data.frame(point_set)
# join raster data feature_id
point_set$feature_id <- as.integer(x[,"feature_id"])
head(point_set)
point_set[, 2:23] <- round(point_set[, 2:23], digits = 1)
# add unit number
point_set$unit_no <- n
# change 0 to null
point_set[point_set == 0] <- NA
head(point_set)
dbWriteTable(con,'pspl_intersected2',point_set,row.names=FALSE,overwrite=TRUE)
names(point_set) <- tolower(names(point_set))
names(point_set)
dbWriteTable(con,'pspl_intersected2',point_set,row.names=FALSE,overwrite=TRUE)
x <- head(point_set)
x
x <- point_set %>% subset(is.na(at_si) & is.na(ba_si) & is.na(bg_si) & is.na(bl_si) & is.na(cw_si) & is.na(dr_si) & is.na(ep_si) & is.na(fd_si) & is.na(hm_si) & is.na(hw_si) & is.na(lt_si) & is.na(lw_si) & is.na(pa_si) & is.na(pl_si) & is.na(pw_si) & is.na(py_si) & is.na(sb_si) & is.na(se_si) & is.na(ss_si) & is.na(sw_si) & is.na(sx_si) & is.na(yc_si))
nrow(x)
x <- point_set %>% subset(!is.na(at_si) & !is.na(ba_si) & !is.na(bg_si) & !is.na(bl_si) & !is.na(cw_si) & !is.na(dr_si) & !is.na(ep_si) & !is.na(fd_si) & !is.na(hm_si) & !is.na(hw_si) & !is.na(lt_si) & !is.na(lw_si) & !is.na(pa_si) & !is.na(pl_si) & !is.na(pw_si) & !is.na(py_si) & !is.na(sb_si) & !is.na(se_si) & !is.na(ss_si) & !is.na(sw_si) & !is.na(sx_si) & !is.na(yc_si))
nrow(x)
head(x)
rm(x)
x <- point_set %>% subset(!is.na(at_si) & !is.na(ba_si) & !is.na(bg_si) & !is.na(bl_si) & !is.na(cw_si) & !is.na(dr_si) & !is.na(ep_si) & !is.na(fd_si) & !is.na(hm_si) & !is.na(hw_si) & !is.na(lt_si) & !is.na(lw_si) & !is.na(pa_si) & !is.na(pl_si) & !is.na(pw_si) & !is.na(py_si) & !is.na(sb_si) & !is.na(se_si) & !is.na(ss_si) & !is.na(sw_si) & !is.na(sx_si) & !is.na(yc_si))
nrow(x)
x <- point_set %>% subset(!is.na(at_si,ba_si,bg_si,bl_si,cw_si,dr_si,ep_si,fd_si,hm_si,hw_si,lt_si,lw_si,pa_si,pl_si,pw_si,py_si,sb_si,se_si,ss_si,sw_si,sx_si,yc_si))
x <- point_set %>% subset(is.na(at_si) & is.na(ba_si) & is.na(bg_si) & is.na(bl_si) & is.na(cw_si) & is.na(dr_si) & is.na(ep_si) & is.na(fd_si) & is.na(hm_si) & is.na(hw_si) & is.na(lt_si) & is.na(lw_si) & is.na(pa_si) & is.na(pl_si) & is.na(pw_si) & is.na(py_si) & is.na(sb_si) & is.na(se_si) & is.na(ss_si) & is.na(sw_si) & is.na(sx_si) & is.na(yc_si)) %>% select(id_tag)
library(tidyverse)
x <- point_set %>% subset(is.na(at_si) & is.na(ba_si) & is.na(bg_si) & is.na(bl_si) & is.na(cw_si) & is.na(dr_si) & is.na(ep_si) & is.na(fd_si) & is.na(hm_si) & is.na(hw_si) & is.na(lt_si) & is.na(lw_si) & is.na(pa_si) & is.na(pl_si) & is.na(pw_si) & is.na(py_si) & is.na(sb_si) & is.na(se_si) & is.na(ss_si) & is.na(sw_si) & is.na(sx_si) & is.na(yc_si)) %>% select(id_tag)
nrow(x)
head(x)
point_set <- point_set %>% subset(!id_tag %in% x$id_tag)
nrow(point_set)
head(point-set)
head(point_set)
year <- '2022'
library(sf)
library(RPostgreSQL)
# set up for load to PostgreSQL
schema <- paste0('msyt_',year)
opt <- paste0("-c search_path=",schema)
user_name <- 'postgres'
database <- 'msyt'
con <- dbConnect('PostgreSQL',dbname=database,user=user_name,options=opt)
# this is where the unzipped files are placed locally
local_gdb_folder <- paste0(substr(getwd(),1,1),':/data/data_projects/AR2022/PSPL/gdb_data')
# build list of the PSPL gdbs
# list of gdb files to process
f_list <- list.files(local_gdb_folder,full.names = TRUE)
num_gdb = length(f_list)  #number of files to process
gdal_utils_gdb_load <- function(pf,n){
# n <- 1
# pf <- f_list[1]
# PostgreSQL connection settings
# schema is not defined
dest <- c("PG:dbname=msyt user=results")
gdb_fc <- tools::file_path_sans_ext(basename(pf))
# give new layer name the schema name
new_layer <- paste0('msyt_',year,'.pspl_unit',n)
# Options Notes
# spatial index is required
# set geometry name to wkb_geometry
gdal_utils(
util="vectortranslate",
source=pf,
dest,
options=
c('-a_srs','EPSG:3005',
'-gt','10000',
'-nln',new_layer,
'-lco', 'GEOMETRY_NAME=wkb_geometry',
'-overwrite'
)
)
}
ogr_load <- function(pf,n){
# pf = GDB full name
# give new layer name the schema name
new_layer <- paste0('msyt_',year,'.pspl_ogr2ogr_unit',n)
gdb_fc <- tools::file_path_sans_ext(basename(pf))
ogr1 <- paste0("-a_srs EPSG:3005 -gt 100000 -select ",select,' ')
ogr2 <- paste0("-f PostgreSQL \"PG:dbname='msyt' user='results'\" -nln  ")
ogr_cmd <- paste0(ogr1,ogr2,new_layer,' ',pf,' ',gdb_fc,' -lco ', 'GEOMETRY_NAME=wkb_geometry',' -overwrite')
system2("ogr2ogr",args=ogr_cmd,wait=TRUE,stderr=TRUE)
}
n <- 1
f <- f_list[1]
f
n
b <- ogr_load(f,n)
ogr_load <- function(pf,n){
# pf = GDB full name
# give new layer name the schema name
new_layer <- paste0('msyt_',year,'.pspl_ogr2ogr_unit',n)
gdb_fc <- tools::file_path_sans_ext(basename(pf))
ogr1 <- paste0("-a_srs EPSG:3005 -gt 100000 ")
ogr2 <- paste0("-f PostgreSQL \"PG:dbname='msyt' user='results'\" -nln  ")
ogr_cmd <- paste0(ogr1,ogr2,new_layer,' ',pf,' ',gdb_fc,' -lco ', 'GEOMETRY_NAME=wkb_geometry',' -overwrite')
system2("ogr2ogr",args=ogr_cmd,wait=TRUE,stderr=TRUE)
}
b <- ogr_load(f,n)
n <- 2
f <- f_list[2]
f
b <- ogr_load(f,n)
year <- '2022'
library(RPostgreSQL)
library(tidyverse)
library(kableExtra)
# set up for load to PostgreSQL
schema <- paste0('msyt_',year)
opt <- paste0("-c search_path=",schema)
user_name <- 'postgres'
database <- 'msyt'
con <- dbConnect('PostgreSQL',dbname=database,user=user_name,options=opt)
# this is where the unzipped files are placed locally
local_gdb_folder <- paste0(substr(getwd(),1,1),':/data/data_projects/AR2022/PSPL/gdb_data')
# build list of the PSPL gdbs
# list of gdb files to process
f_list <- list.files(local_gdb_folder,full.names = TRUE)
num_gdb = length(f_list)  #number of files to process
# GDB
ogrinfo_rows <- function(pf){
# pf <- f_list[1]
layer <- tools::file_path_sans_ext(basename(pf))
cmd <- paste0(pf,' -so ',layer)
a <- system2("ogrinfo", args=cmd, stdout=TRUE)
rc <- as.numeric(unlist(strsplit(a[grepl('Feature',a)],':'))[[2]])
return(rc)
}
# PostgreSQL
psql_rows <- function(t){
q1 <- paste0('select count(*) as n from ',t)
rc <- dbGetQuery(con,q1)
return(rc)
}
# NULL si values
psql_si_null <- function(t){
q1 <- paste0('select count(*) as n from ',t,' where (at_si >0 or ba_si >0 or bg_si >0 or bl_si >0 or cw_si >0
or dr_si>0 or ep_si >0 or fd_si >0 or hm_si >0 or hw_si >0
or lt_si >0 or lw_si >0 or pa_si >0 or pl_si >0 or pw_si >0
or py_si >0 or sb_si >0 or se_si >0 or ss_si >0 or sw_si >0
or sx_si >0 or yc_si > 0)')
rc <- dbGetQuery(con,q1)
return(rc)
}
z <- data.frame('Unit' = '', 'n' = '')
z2 <- data.frame('Unit' = '', 'n' = '')
z3 <- data.frame('Unit' = '', 'n' = '')
n <- 1
for(i in 1:3){
f <- f_list[i]
# rows for ogrinfo
a <- ogrinfo_rows(f)
layer <- tools::file_path_sans_ext(basename(f))
p_table <- paste0('pspl_unit',n)
# rows loaded from GDB to PostgreSQL using gdal_utils
# table name = pspl_unitn
p_table <- paste0('pspl_unit',n)
gdal_rows <- psql_rows(p_table)
# rows loaded from GDB to PostgreSQL using OGR2OGR
# table name = pspl_ogr2ogr_unitn
p_table <- paste0('pspl_ogr2ogr_unit',n)
ogr_rows <- psql_rows(p_table)
z <- rbind(z,data.frame('Unit' = layer,'n' = as.numeric(a)))
z2 <- rbind(z2,data.frame('Unit' = layer, 'n' = as.numeric(gdal_rows$n)))
z3 <- rbind(z3,data.frame('Unit' = layer, 'n' = as.numeric(ogr_rows$n)))
n <- n + 1
}
dbDisconnect(con)
names(z) <- c('Unit','GDB n')
names(z2) <- c('Unit','gdal_utils n')
names(z3) <- c('Unit','OGR2OGR n')
c <- left_join(z,z2)
c <- left_join(c,z3)
c
c <- c %>% subset(Unit != '')
rownames(c) <- 1:nrow(c)
kable(c,format='markdown')
