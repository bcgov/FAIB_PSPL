# read each raster set and compare
# if the diff is not zero, set it to 1
# this will show where pixel values are different
tif1 <- 'D:/data/data_projects/VRI_Rasterization/method1.tif'
r1 <- terra::rast(tif1)
ext1 <- terra::ext(r1)
ext2 <- terra::ext(base_raster)
ext3 <- terra::ext(base_raster_masked)
print(ext1)
print(ext3)
print(ext2)
c1 <- r1 - base_raster_masked
c1[c1 != 0] <- 1
f1 <- as.data.frame(terra::freq(c1))
f1 <- f1[,2:3]
kable(f1)
lst <- list(r1,base_raster,base_raster_masked,c1)
# create a brick of these rasters from list
raster_brick <-terra::rast(lst)
names(raster_brick)
names(raster_brick)
names(raster_brick) <- c('method1','vri_base','vri_base_masked','diff')
names(raster_brick)
tif_brick <- 'D:/data/data_projects/AR2022/base/tif_brick.tif'
terra::writeRaster(raster_brick, tif_brick, datatype='INT4U', overwrite=TRUE)
diff_1 <- 'D:/data/data_projects/AR2022/base/tif_diff.tif'
terra::writeRaster(c1, diff_1, datatype='INT4U', overwrite=TRUE)
fref(c1)
freq(c1)
library(sf)
library(terra)
library(RPostgreSQL)
library(raster)
library(kableExtra)
# created a mask to get rid of Alberta blob.
# read gdb file
# data has single polygon with id = 101
# standardize extents
xmin <- 273287.5
xmax <- 1870587.5
ymin <- 367787.5
ymax <- 1735787.5
nodata <- 0
dataType <- 'Int32'
# raster files
src <- 'D:/data/data_projects/AR2022/base/vri_mask.shp'
dest <- 'D:/data/data_projects/AR2022/base/vri_mask.tif'
# note that in reading a Shp file, the layer is the same as the file name
gdal_utils("rasterize",src,dest,options =
c('-tr','100',' 100',
'-te',xmin,ymin,xmax,ymax,
'-ot', dataType,
'-l', 'vri_mask',
'-a', 'id' ,
'-a_srs','EPSG:3005',
'-a_nodata', nodata,
'-co','COMPRESS=LZW'),
'-overwrite')
# update for NA
mask_raster <- terra::rast(dest)
# change NoData to 1 for masking
# we want the invert of the outline polygon so that it can be deleted from orginal data
mask_raster[is.na(mask_raster)]  <- 1
# change wher there are values to NA to use as mask to get rid of this from Iaian's data
mask_raster[mask_raster != 1]  <- NA
# the mask will have 1 for valid rasters and NoData where we want to mask out
# so in effect we have blanked out the polygon defined in the Shp file
terra::writeRaster(mask_raster, dest, datatype='INT4U', overwrite=TRUE)
# read Iaian's tif and apply the mask
vri_in <- 'D:/data/data_projects/AR2022/base/veg_comp_lyr_r1_poly_internal_2021.tif'
vri_out <- 'D:/data/data_projects/AR2022/base/veg_comp_lyr_r1_poly_internal_2021_masked.tif'
base_raster <- terra::rast(vri_in)
# apply the mask
base_raster_masked <- mask(base_raster,mask_raster)
# update the NoData to zeros
base_raster_masked[is.na(base_raster_masked)]  <- 0
terra::writeRaster(base_raster_masked, vri_out, datatype='INT4U', overwrite=TRUE)
tif1 <- 'D:/data/data_projects/VRI_Rasterization/method1.tif'
r1 <- terra::rast(tif1)
ext1 <- terra::ext(r1)
ext2 <- terra::ext(base_raster)
ext3 <- terra::ext(base_raster_masked)
ext1
ext2
ext3
c1 <- r1 - base_raster_masked
c1[c1 != 0] <- 1
freq(c1)
# create list of rasters
lst <- list(r1,base_raster,base_raster_masked,c1)
# create a brick of these rasters from list
raster_brick <-terra::rast(lst)
# name the layers
names(raster_brick) <- c('method1','vri_base','vri_base_masked','diff')
# write brick to a tiff
tif_brick <- 'D:/data/data_projects/AR2022/base/tif_brick.tif'
terra::writeRaster(raster_brick, tif_brick, datatype='INT4U', overwrite=TRUE)
diff_1 <- 'D:/data/data_projects/AR2022/base/tif_diff.tif'
terra::writeRaster(c1, diff_1, datatype='INT4U', overwrite=TRUE)
r <- rast(ncols=10, nrows=10)
m <- rast(ncols=10, nrows=10)
values(r) <- 1:100
plot(r)
set.seed(1965)
x <- round(3 * runif(ncell(r)))
x[x==0] <- NA
values(m) <- x
plot(m)
mr <- mask(r, m)
plot(mr)
freq(m)
tif_brick
raster_brick
which(raster_brick[raster_brick == 19076519])
r1[r1==19076519])
a <- r1[r1==19076519]
a
match(19076519,r1)
v <- terra:;values(r1)
v <- terra::values(r1)
class(v)
head(v)
match(19076519,v)
r1[125172540]
raster_base[125172540]
base_raster[125172540]
base_raster_masked[125172540]
library(sf)
library(terra)
library(RPostgreSQL)
library(raster)
library(kableExtra)
# created a mask to get rid of Alberta blob.
# read gdb file
# data has single polygon with id = 101
# standardize extents
xmin <- 273287.5
xmax <- 1870587.5
ymin <- 367787.5
ymax <- 1735787.5
nodata <- 0
dataType <- 'Int32'
# raster files
src <- 'D:/data/data_projects/AR2022/base/vri_mask.shp'
dest <- 'D:/data/data_projects/AR2022/base/vri_mask.tif'
# note that in reading a Shp file, the layer is the same as the file name
gdal_utils("rasterize",src,dest,options =
c('-tr','100',' 100',
'-te',xmin,ymin,xmax,ymax,
'-ot', dataType,
'-l', 'vri_mask',
'-a', 'id' ,
'-a_srs','EPSG:3005',
'-a_nodata', nodata,
'-co','COMPRESS=LZW'),
'-overwrite')
# update for NA
mask_raster <- terra::rast(dest)
# change NoData to 1 for masking
# we want the invert of the outline polygon so that it can be deleted from orginal data
mask_raster[is.na(mask_raster)]  <- 1
library(sf)
library(terra)
library(RPostgreSQL)
library(raster)
library(kableExtra)
# created a mask to get rid of Alberta blob.
# read gdb file
# data has single polygon with id = 101
# standardize extents
xmin <- 273287.5
xmax <- 1870587.5
ymin <- 367787.5
ymax <- 1735787.5
nodata <- 0
dataType <- 'Int32'
# raster files
src <- 'D:/data/data_projects/AR2022/base/vri_mask.shp'
dest <- 'D:/data/data_projects/AR2022/base/vri_mask.tif'
# note that in reading a Shp file, the layer is the same as the file name
gdal_utils("rasterize",src,dest,options =
c('-tr','100',' 100',
'-te',xmin,ymin,xmax,ymax,
'-ot', dataType,
'-l', 'vri_mask',
'-a', 'id' ,
'-a_srs','EPSG:3005',
'-a_nodata', nodata,
'-co','COMPRESS=LZW'),
'-overwrite')
# update for NA
mask_raster <- terra::rast(dest)
# change NoData to 1 for masking
# we want the invert of the outline polygon so that it can be deleted from orginal data
mask_raster[is.na(mask_raster)]  <- 1
mask_raster[125172540]
freq(mask_raster)
mask_raster[mask_raster != 1]  <- NA
mask_raster[125172540]
terra::writeRaster(mask_raster, dest, datatype='INT4U', overwrite=TRUE)
# read Iaian's tif and apply the mask
vri_in <- 'D:/data/data_projects/AR2022/base/veg_comp_lyr_r1_poly_internal_2021.tif'
vri_out <- 'D:/data/data_projects/AR2022/base/veg_comp_lyr_r1_poly_internal_2021_masked.tif'
base_raster <- terra::rast(vri_in)
base_raster[125172540]
base_raster_masked <- mask(base_raster,mask_raster)
base_raster_masked[125172540]
base_raster_masked[is.na(base_raster_masked)]  <- 0
base_raster_masked[125172540]
terra::writeRaster(base_raster_masked, vri_out, datatype='INT4U', overwrite=TRUE)
tif1 <- 'D:/data/data_projects/VRI_Rasterization/method1.tif'
tif2 <- 'D:/data/data_projects/AR2022/base/veg_comp_lyr_r1_poly_internal_2021.tif'
tif3 <- 'D:/data/data_projects/AR2022/base/veg_comp_lyr_r1_poly_internal_2021_masked.tif
r1 <- terra::rast(tif1)
r2 <- terra::rast(tif2)
r3 <- terra::rast(tif3)
tif1 <- 'D:/data/data_projects/VRI_Rasterization/method1.tif'
tif2 <- 'D:/data/data_projects/AR2022/base/veg_comp_lyr_r1_poly_internal_2021.tif'
tif3 <- 'D:/data/data_projects/AR2022/base/veg_comp_lyr_r1_poly_internal_2021_masked.tif'
r1 <- terra::rast(tif1)
r2 <- terra::rast(tif2)
r3 <- terra::rast(tif3)
nasme(r1)
names(r1)
names(r2)
names(r2) <- 'vri_base'
names(r3) <- 'vri_masked'
r1[125172540]
r2[125172540]
r3[125172540]
c1 <- r1 - r3
c1[c1 != 0] <- 1
freq(c1)
library(sf)
library(terra)
library(RPostgreSQL)
library(raster)
library(kableExtra)
# created a mask to get rid of Alberta blob.
# read gdb file
# data has single polygon with id = 101
# standardize extents
xmin <- 273287.5
xmax <- 1870587.5
ymin <- 367787.5
ymax <- 1735787.5
nodata <- 0
dataType <- 'Int32'
# raster files
src <- 'D:/data/data_projects/AR2022/base/vri_mask.shp'
dest <- 'D:/data/data_projects/AR2022/base/vri_mask.tif'
# note that in reading a Shp file, the layer is the same as the file name
gdal_utils("rasterize",src,dest,options =
c('-tr','100',' 100',
'-te',xmin,ymin,xmax,ymax,
'-ot', dataType,
'-l', 'vri_mask',
'-a', 'id' ,
'-a_srs','EPSG:3005',
'-a_nodata', nodata,
'-co','COMPRESS=LZW'),
'-overwrite')
# update for NA
mask_raster <- terra::rast(dest)
# change NoData to 1 for masking
# we want the invert of the outline polygon so that it can be deleted from orginal data
mask_raster[is.na(mask_raster)]  <- 1
# change wher there are values to NA to use as mask to get rid of this from Iaian's data
mask_raster[mask_raster != 1]  <- NA
# the mask will have 1 for valid rasters and NoData where we want to mask out
# so in effect we have blanked out the polygon defined in the Shp file
terra::writeRaster(mask_raster, dest, datatype='INT4U', overwrite=TRUE)
# read Iaian's tif and apply the mask
vri_in <- 'D:/data/data_projects/AR2022/base/veg_comp_lyr_r1_poly_internal_2021.tif'
vri_out <- 'D:/data/data_projects/AR2022/base/vri_masked.tif'
base_raster <- terra::rast(vri_in)
# apply the mask
base_raster_masked <- mask(base_raster,mask_raster)
# update the NoData to zeros
base_raster_masked[is.na(base_raster_masked)]  <- 0
terra::writeRaster(base_raster_masked, vri_out, datatype='INT4U', overwrite=TRUE)
# read each raster set and compare
# if the diff is not zero, set it to 1
# this will show where pixel values are different
tif1 <- 'D:/data/data_projects/VRI_Rasterization/method1.tif'
tif2 <- 'D:/data/data_projects/AR2022/base/veg_comp_lyr_r1_poly_internal_2021.tif'
tif3 <- 'D:/data/data_projects/AR2022/base/vri_masked.tif'
r1 <- terra::rast(tif1)
r2 <- terra::rast(tif2)
r3 <- terra::rast(tif3)
names(r2) <- 'vri_base'
names(r3) <- 'vri_masked'
c1 <- r1 - r3
c1[c1 != 0] <- 1
f1 <- as.data.frame(terra::freq(c1))
f1 <- f1[,2:3]
kable(f1)
f1
points <- 'D:/data/data_projects/AR2022/base/tif_diff.tif'
pr <- terra::rast(points)
freq(pr)
library(terra)
freq(pr)
pr[pr==0] <- NA
freq(pr)
p <- terra::as.points(c1,values=TRUE,na.rm=TRUE)
p <- terra::as.points(pr,values=TRUE,na.rm=TRUE)
class(p)
plot(p)
f_out <- 'D:/data/data_projects/AR2022/base/tif_diff.shp'
writeVector(p,f_out,overwrite=TRUE)
del_file <- function (fn){
#Check its existence
if (file.exists(fn)) {
#Delete file if it exists
file.remove(fn)
}
}
del_file(dest)
dest <- 'D:/data/data_projects/AR2022/base/vri_mask_for_delete.tif'
del_file(dest)
library(RPostgreSQL)
library(sf)
library(terra)
library(RPostgreSQL)
library(raster)
src <- 'D:/data/data_projects/AR2022/vri/VEG_COMP_LYR_R1_POLY_2021.gdb'
dest <- paste0(substr(getwd(),1,1),':/data/data_projects/VRI_Rasterization/method1.tif')
#SpatExtent : 273287.5, 1870587.5, 367787.5, 1735787.5 (xmin, xmax, ymin, ymax)
# standardize extents
xmin <- 273287.5
xmax <- 1870587.5
ymin <- 367787.5
ymax <- 1735787.5
nodata <- 0
dataType <- 'Int32'
gdal_utils("rasterize",src,dest,options =
c('-tr','100',' 100',
'-te',xmin,ymin,xmax,ymax,
'-ot', dataType,
'-l', 'VEG_COMP_LYR_R1_POLY',
'-a', 'FEATURE_ID' ,
'-a_srs','EPSG:3005',
'-a_nodata', nodata,
'-co','COMPRESS=LZW'),
'-overwrite')
r1 <- terra::rast(dest)
r1[is.na(r1)]  <- 0
terra::writeRaster(r1, dest, datatype='INT4U', overwrite=TRUE)
r1
v_r1 <- values(r1)
class(v_r1)
v_r1 <- as.data.frame(values(r1))
head(v_r1)
names(v_r1) <- ''feature_id
names(v_r1) <- 'feature_id'
head(v_r1)
v_r1 <- as.data.frame(unique((values(r1)))
v_r1 <- as.data.frame(unique(values(r1)))
v_r1 <- unique(as.data.frame(values(r1)))
head(v_r1)
names(v_r1) <- 'feature_id'
library(tidyverse)
new_fid <- v_r1 %>% subset(!feature_id %in% fid$feature_id)
con <- dbConnect('PostgreSQL',dbname=msyt)
con <- dbConnect('PostgreSQL',dbname='msyt')
fid <- dbGetQuery(con,'select feature_id from msyt_2022.veg_comp')
dbDisconnect(con)
new_fid <- v_r1 %>% subset(!feature_id %in% fid$feature_id)
new_fid
library(sf)
library(terra)
library(RPostgreSQL)
library(raster)
library(kableExtra)
del_file <- function (fn){
#Check its existence
if (file.exists(fn)) {
#Delete file if it exists
file.remove(fn)
}
}
# created a mask to get rid of Alberta blob.
# read gdb file
# data has single polygon with id = 101
# standardize extents
xmin <- 273287.5
xmax <- 1870587.5
ymin <- 367787.5
ymax <- 1735787.5
nodata <- 0
dataType <- 'Int32'
# raster files
src <- 'D:/data/data_projects/AR2022/base/vri_mask.shp'
dest <- 'D:/data/data_projects/AR2022/base/vri_mask_for_delete.tif'
del_file(dest)
# note that in reading a Shp file, the layer is the same as the file name
gdal_utils("rasterize",src,dest,options =
c('-tr','100',' 100',
'-te',xmin,ymin,xmax,ymax,
'-ot', dataType,
'-l', 'vri_mask',
'-a', 'id' ,
'-a_srs','EPSG:3005',
'-a_nodata', nodata,
'-co','COMPRESS=LZW'),
'-overwrite')
# update for NA
mask_raster <- terra::rast(dest)
# change NoData to 1 for masking
# we want the invert of the outline polygon so that it can be deleted from orginal data
mask_raster[is.na(mask_raster)]  <- 1
# change wher there are values to NA to use as mask to get rid of this from Iaian's data
mask_raster[mask_raster != 1]  <- NA
# the mask will have 1 for valid rasters and NoData where we want to mask out
# so in effect we have blanked out the polygon defined in the Shp file
del_file(dest)
terra::writeRaster(mask_raster, dest, datatype='INT4U', overwrite=TRUE)
# read Iaian's tif and apply the mask
vri_in <- 'D:/data/data_projects/AR2022/base/veg_comp_lyr_r1_poly_internal_2021.tif'
vri_out <- 'D:/data/data_projects/AR2022/base/veg_comp_2022_masked.tif'
base_raster <- terra::rast(vri_in)
# apply the mask
base_raster_masked <- mask(base_raster,mask_raster)
# update the NoData to zeros
base_raster_masked[is.na(base_raster_masked)]  <- 0
del_file(vri_out)
terra::writeRaster(base_raster_masked, vri_out, datatype='INT4U', overwrite=TRUE)
# read each raster set and compare
# if the diff is not zero, set it to 1
# this will show where pixel values are different
tif1 <- 'D:/data/data_projects/VRI_Rasterization/method1.tif'
tif2 <- 'D:/data/data_projects/AR2022/base/veg_comp_lyr_r1_poly_internal_2021.tif'
tif3 <- 'D:/data/data_projects/AR2022/base/veg_comp_2022_masked.tif'
r1 <- terra::rast(tif1)
r3 <- terra::rast(tif3)
names(r1) <- 'method1'
names(r3) <- 'vri_masked'
# get list of unique feature ids
v_r1 <- unique(as.data.frame(values(r1)))
names(v_r1) <- 'feature_id'
v_r3 <- unique(as.data.frame(values(r3)))
names(v_r3) <- 'feature_id'
c1 <- r1 - r3
c1[c1 != 0] <- 1
f1 <- as.data.frame(terra::freq(c1))
f1 <- f1[,2:3]
kable(f1)
# create list of rasters
lst <- list(r1,base_raster,base_raster_masked,c1)
# create a brick of these rasters from list
raster_brick <-terra::rast(lst)
# name the layers
names(raster_brick) <- c('method1','vri_base','vri_base_masked','diff')
# write brick to a tiff
tif_brick <- 'D:/data/data_projects/AR2022/base/tif_brick.tif'
del_file(tif_brick)
terra::writeRaster(raster_brick, tif_brick, datatype='INT4U', overwrite=TRUE)
# write the differences to a separate tif
diff_1 <- 'D:/data/data_projects/AR2022/base/tif_diff.tif'
del_file(diff_1)
terra::writeRaster(c1, diff_1, datatype='INT4U', overwrite=TRUE)
# can write to points to have a look
point_file <- 'D:/data/data_projects/AR2022/base/tif_diff.tif'
pr <- terra::rast(point_file)
# set 0 to NA
pr[pr==0] <- NA
p <- terra::as.points(pr,values=TRUE,na.rm=TRUE)
# write to shape
f_out <- 'D:/data/data_projects/AR2022/base/tif_diff_points.shp'
del_file(f_out)
writeVector(p,f_out,overwrite=TRUE)
con <- dbConnect('PostgreSQL',dbname='msyt')
fid <- dbGetQuery(con,'select feature_id from msyt_2022.veg_comp')
dbDisconnect(con)
head(v_r1)
new_fid_r1 <- v_r1 %>% subset(!feature_id %in% fid$feature_id)
new_fid_r3 <- v_r3 %>% subset(!feature_id %in% fid$feature_id)
new_fid_r1
new_fid_r3
library(tidyverse)
library(tidyverse)
library(data.table)
con <- RPostgreSQL::dbConnect('PostgreSQL',dbname='msyt')
psql_fid <- DBI::dbGetQuery(con,'select feature_id from msyt_2022.veg_comp')
RPostgreSQL::dbDisconnect(con)
tif_fid <- as.data.table(terra::values(r1 <- terra::rast(dest)))
library(tidyverse)
library(data.table)
con <- RPostgreSQL::dbConnect('PostgreSQL',dbname='msyt')
psql_fid <- DBI::dbGetQuery(con,'select feature_id from msyt_2022.veg_comp')
RPostgreSQL::dbDisconnect(con)
dest <- paste0(substr(getwd(),1,1),':/data/data_projects/AR2022/PSPL/vri_raster.tif')
r1 <- terra::rast(dest)
tif_fid <- as.data.table(terra::values(r1)
tif_fid <- as.data.table(terra::values(r1))
psql_only <- psql_fid %>% subset(!feature_id %in% tif_fid$feature_id)
nrow(psql_only)
nrow(tif_only)
tif_only <- tif_fid %>% subset(!feature_id %in% psql_fid$feature_id)
head(tif_fid)
nrow(tif_fid)
tif_fid <- unique(tif_fid)
head(tif_fid)
names(tif_fid) <- 'feature_id'
head(tif_fid)
head(psql_fid)
psql_only <- psql_fid %>% subset(!feature_id %in% tif_fid$feature_id)
nrow(psql_only)
tif_only <- tif_fid %>% subset(!feature_id %in% psql_fid$feature_id)
nrow(tif_only)
tif_only
